{"version":3,"sources":["packages/react-stateful/src/stateful.ts","packages/react-stateful/src/model.ts","packages/react-pangul-core/src/domain/userContext.ts","packages/react-pangul-app/src/components/layout/layoutTheme/layoutTheme.tsx","packages/react-pangul-core/src/infrastructure/providers/provider.ts","packages/react-pangul-core/src/providers/loggerProvider.ts","packages/react-pangul-core/src/infrastructure/providers/providerFactory.ts","packages/react-pangul-core/src/infrastructure/fetch/standardError.ts","packages/react-pangul-core/src/infrastructure/fetch/ajaxFetch.ts","packages/react-pangul-core/src/infrastructure/logger/consoleLogger.ts","packages/react-pangul-core/src/infrastructure/providers/providerSingleton.ts","packages/react-pangul-core/src/providers/fetchProvider.ts","packages/react-pangul-app/src/infrastructure/service/settingsProvider.ts","packages/react-pangul-core/src/infrastructure/baseController.ts","packages/react-pangul-core/src/controllers/authController.ts","packages/react-pangul-core/src/services/authService.ts","packages/react-pangul-app/src/components/common/loaders/pageLoader.tsx","packages/react-pangul-app/src/components/layout/layoutContentContainer/layoutContentContainer.tsx","packages/react-pangul-app/src/components/common/errors/errorNotice/errorNotice.tsx","packages/react-pangul-app/src/components/layout/layoutFormContainer/layoutFormContainer.tsx","packages/react-pangul-app/src/components/layout/layoutRightBox/layoutRightBox.tsx","packages/react-pangul-app/src/pages/generic/genericLoginPage/genericLoginPage.tsx","packages/react-pangul-app/src/app/appAuth/appAuth.tsx","packages/react-pangul-app/src/components/common/display/safeHtml/safeHtml.tsx","packages/react-pangul-app/src/components/common/display/safeMarkdown/safeMarkdown.tsx","packages/react-pangul-app/src/components/common/editors/markdownEditor/markdownEditor.tsx","packages/react-pangul-app/src/components/answer/answerForm/answerForm.tsx","packages/react-pangul-app/src/components/common/display/infoNotice/infoNotice.tsx","packages/react-pangul-core/src/controllers/topicsController.ts","packages/react-pangul-core/src/domain/querySet.ts","packages/react-pangul-core/src/domain/topic.ts","packages/react-pangul-app/src/infrastructure/service/navigationService.ts","packages/react-pangul-app/src/components/topic/topicLink/topicLink.tsx","packages/react-pangul-app/src/components/topic/topicInfo/topicInfo.tsx","packages/react-pangul-app/src/components/user/userCurrentInfo/userCurrentInfo.tsx","packages/react-pangul-app/src/components/layout/layoutFooter/layoutFooter.tsx","packages/react-pangul-app/src/components/layout/layoutStandardHeader/layoutStandardHeader.tsx","packages/react-pangul-app/src/components/question/questionLink/questionLink.tsx","packages/react-pangul-app/src/components/layout/layoutRightBottom/layoutRightBottom.tsx","packages/react-pangul-app/src/components/layout/layoutIf/layoutIf.tsx","packages/react-pangul-app/src/components/metadata/votesAndStars/votesAndStars.tsx","packages/react-pangul-app/src/components/tag/tagList/tagList.tsx","packages/react-pangul-app/src/components/user/userSummary/userSummary.tsx","packages/react-pangul-app/src/components/question/questionView/questionView.tsx","packages/react-pangul-core/src/controllers/answersController.ts","packages/react-pangul-core/src/domain/answerMeta.ts","packages/react-pangul-core/src/infrastructure/caching/memoryCache.ts","packages/react-pangul-core/src/controllers/usersController.ts","packages/react-pangul-core/src/domain/userView.ts","packages/react-pangul-core/src/domain/answer.ts","packages/react-pangul-core/src/controllers/questionsController.ts","packages/react-pangul-core/src/domain/questionMeta.ts","packages/react-pangul-core/src/domain/question.ts","packages/react-pangul-app/src/infrastructure/componentHelpers/page.ts","packages/react-pangul-app/src/pages/answer/topicAnswerQuestion/topicAnswerQuestion.ts","packages/react-pangul-app/src/pages/answer/topicAnswerQuestion/topicAnswerQuestionPage.tsx","packages/react-pangul-app/src/components/layout/layoutUnsafeBox/layoutUnsafeBox.tsx","packages/react-pangul-app/src/components/layout/layoutWithPermissions/layoutWithPermissions.tsx","packages/react-pangul-app/src/components/layout/layoutStandardUnsafe/layoutStandardUnsafe.tsx","packages/react-pangul-app/src/pages/answer/topicEditAnswer/topicEditAnswer.ts","packages/react-pangul-app/src/pages/answer/topicEditAnswer/topicEditAnswerPage.tsx","packages/react-pangul-app/src/pages/generic/genericHelpPage/genericHelpPage.tsx","packages/react-pangul-app/src/pages/generic/genericLogoutPage/genericLogoutPage.tsx","packages/react-pangul-app/src/components/common/editors/inputEditor/inputEditor.tsx","packages/react-pangul-app/src/components/tag/tagPicker/tagPicker.tsx","packages/react-pangul-app/src/components/common/utility/sameArray.ts","packages/react-pangul-app/src/components/question/questionForm/questionForm.tsx","packages/react-pangul-app/src/pages/question/topicAskQuestion/topicAskQuestion.ts","packages/react-pangul-app/src/pages/question/topicAskQuestion/topicAskQuestionPage.tsx","packages/react-pangul-app/src/pages/question/topicEditQuestion/topicEditQuestion.ts","packages/react-pangul-app/src/pages/question/topicEditQuestion/topicEditQuestionPage.tsx","packages/react-pangul-app/src/components/answer/answerLink/answerLink.tsx","packages/react-pangul-app/src/components/answer/answerView/answerView.tsx","packages/react-pangul-app/src/components/answer/answerList/answerList.tsx","packages/react-pangul-app/src/components/common/fragments/querySetPaginator/querySetPaginator.tsx","packages/react-pangul-app/src/pages/question/topicViewQuestion/topicViewQuestion.ts","packages/react-pangul-app/src/pages/question/topicViewQuestion/topicViewQuestionPage.tsx","packages/react-pangul-app/src/components/common/fragments/searchBar/searchBar.tsx","packages/react-pangul-app/src/components/topic/topicView/topicView.tsx","packages/react-pangul-app/src/components/topic/topicList/topicList.tsx","packages/react-pangul-core/src/domain/questionSummary.ts","packages/react-pangul-app/src/pages/topic/topicDiscover/topicDiscover.ts","packages/react-pangul-app/src/components/metadata/votesAndStarsReadonly/votesAndStarsReadonly.tsx","packages/react-pangul-app/src/components/question/questionSummaryView/questionSummaryView.tsx","packages/react-pangul-app/src/components/question/questionSummaryList/questionSummaryList.tsx","packages/react-pangul-app/src/pages/topic/topicDiscover/topicDiscoverPage.tsx","packages/react-pangul-app/src/components/common/editors/inlineImgEditor/inlineImgEditor.tsx","packages/react-pangul-app/src/components/topic/topicForm/topicForm.tsx","packages/react-pangul-app/src/pages/topic/topicEdit/topicEdit.ts","packages/react-pangul-app/src/pages/topic/topicEdit/topicEditPage.tsx","packages/react-pangul-app/src/pages/topic/topicSearch/topicSearch.ts","packages/react-pangul-app/src/pages/topic/topicSearch/topicSearchPage.tsx","packages/react-pangul-app/src/pages/user/userViewProfile/userViewSelfProfile.ts","packages/react-pangul-app/src/pages/user/userViewProfile/userViewSelfProfilePage.tsx","packages/react-pangul-app/src/app/appRoutes/appRoutes.tsx","packages/react-pangul-app/src/app/pangul/pangul.tsx","App.tsx","registerServiceWorker.ts","index.tsx"],"names":["Stateful","constructor","state","parent","props","error","updating","updateDepth","observer","Subject","this","_unsafeAssignState","subscribe","onUpdate","subscriber","unsubscribe","update","asyncUpdateAction","_startUpdate","delta","_completedUpdate","next","Object","entries","entry","_","Model","super","blank","rebind","UserContext","reset","a","loggedIn","permissions","username","LayoutTheme","React","render","className","children","Provider","get","instance","provide","Error","LoggerProvider","factory","configure","StandardError","message","errors","innerErrors","AjaxFetch","body","JSON","stringify","logger","info","rootUrl","url","fetch","method","response","ok","statusText","json","post","apiHeaders","Headers","raw","serializeRequestBody","cache","credentials","headers","mode","redirect","errorDetail","result","success","status","ConsoleLogger","window","console","optionalParams","log","ProviderSingleton","FetchProvider","SettingsProvider","BaseController","data","AuthController","login","password","logout","claims","AuthService","authController","context","user","token","hasPermissions","length","filter","p","find","i","refresh","PageLoader","loading","LayoutContentContainer","ErrorNotice","innerRef","scrollAsync","ref","renderInnerErrors","inner","kv","push","key","setTimeout","current","ReactDOM","scrollIntoView","block","behavior","LayoutFormContainer","LayoutRightBox","position","expand","style","GenericLoginPage","onSubmitLogin","e","preventDefault","onUsernameChange","setState","currentTarget","value","onPasswordChange","onSubmit","type","onChange","AppAuth","refreshed","componentWillUnmount","componentDidMount","resubscribe","content","renderLoggedIn","renderLoggedOut","componentDidUpdate","forceUpdate","service","then","SafeHtml","sanitize","allowProtocolRelative","allowedAttributes","img","allowedIframeHostnames","allowedTags","allowedSchemes","allowedSchemesAppliedToAttributes","allowedSchemesByTag","selfClosing","output","safe","dangerouslySetInnerHTML","__html","SafeMarkdown","converter","Showdown","html","makeHtml","markdown","MarkdownEditor","lastPropValue","events","event","AnswerForm","lastUpdate","Date","onBodyChanged","onSave","answer","action","saveText","submit","InfoNotice","TopicsController","delete","RowVersion","rowVersion","TopicId","topicId","name","id","TopicName","search","query","offset","limit","QuerySet","page","querySet","instances","moreResults","undefined","pageSize","fetchIds","queryResult","deferred","identityList","map","fetchInstance","Promise","all","prev","reject","Topic","topic","fromQuery","searchForIds","getById","controller","fetchData","save","simpleState","description","icon","NavigationService","root","baseUrl","endsWith","replace","urlForAnswerEdit","questionId","answerId","urlForQuestion","urlForQuestionEdit","urlForTopic","urlForTopicEdit","urlForTopicAddQuestion","urlForQuestionAnswer","urlForHelp","urlForRoot","urlForLogout","urlForSelfProfile","urlForTopicQuery","location","href","TopicLinkType","TopicLink","nav","linkUrl","getUrl","to","target","AddQuestion","View","Edit","None","TopicDescription","desc","TopicIcon","src","TopicInfo","UserCurrentInfo","LayoutFooter","settings","footerNotice","LayoutStandardHeader","QuestionLinkType","QuestionLink","question","topicName","Answer","LayoutRightBottom","LayoutIf","show","VotesAndStars","onVoteUp","userVotes","onVote","onVoteDown","onStar","showStars","userStars","upStyles","downStyles","starStyles","join","onClick","votes","TagList","tags","UserSummary","QuestionView","meta","voteUp","voteDown","voteNeutral","stars","addStar","removeStar","star","global","title","AnswersController","add","getMetadata","updateMetadata","metadata","AnswerMeta","answerMetaId","MemoryCache","pending","requests","expires","now","requestKey","isExpired","set","expiresIn","waitPending","resolve","userQueryCache","UserController","userId","cachedResponse","UserView","userData","fetchAnswerData","identity","canEdit","answerData","QuestionsController","getSummary","QuestionMeta","questionMetaId","Question","fetchQuestionData","questionData","Page","isLoaded","load","runAsync","loadInitialData","unload","task","err","TopicAnswerQuestion","answerQuestion","notice","fromProps","TopicAnswerQuestionPage","answerQuestionEvent","guardInvalidState","LayoutUnsafeBox","toggleOpenState","open","LayoutWithPermissions","auth","authorized","requirePermissions","LayoutStandardUnsafe","TopicEditAnswer","saveAnswer","deleteAnswer","TopicEditAnswerPage","saveAnswerEvent","onDeleteQuestion","HelpTip","GenericHelpPage","GenericLogoutPage","onLogout","authService","InputEditor","TagPicker","b","index","isSameArray","lastTags","tagEditValue","self","indexOf","onTagsChangedEvent","onTagsChanged","split","trim","onlyUnique","QuestionForm","onSaveEvent","onTitleChangedEvent","onBodyChangedEvent","onTopicChanged","onTitleChanged","showTopic","TopicAskQuestion","askQuestion","TopicAskQuestionPage","TopicEditQuestion","updateQuestion","deleteQuestion","postDeleteUrl","TopicEditQuestionPage","onUpdateQuestionEvent","AnswerLinkType","AnswerLink","AnswerView","AnswerList","renderAnswerList","answers","QuerySetPaginator","onChangeSize","ev","val","Number","options","allowedSizes","queryState","onPrev","onNext","TopicViewQuestion","setPageSize","refreshData","TopicViewQuestionPage","size","SearchBar","searchStream","onChangeEvent","pipe","debounceTime","debounce","defaultProps","TopicView","TopicList","renderList","topics","QuestionSummary","summary","TopicDiscover","questions","VotesAndStarsReadonly","QuestionSummaryView","renderAnswer","QuestionSummaryList","showEmpty","TopicDiscoverPage","onSearchEvent","onSearch","RenderImg","InlineImgEditor","loaded","total","files","file","reader","FileReader","onloadend","onprogress","readAsDataURL","TopicForm","onDescChangedEvent","onDescChanged","onIconChangedEvent","onIconChanged","TopicEdit","saveTopic","deleteTopic","TopicEditPage","onSubmitFormEvent","onDeleteTopic","home","TopicSearch","TopicSearchPage","lastSearchProp","prevProps","prevState","snapshot","UserViewSelfProfile","starQuestions","UserViewSelfProfilePage","starred","AppRoutes","help","discoverTopics","searchTopicWithQuery","match","params","searchTopic","editTopic","viewQuestion","editQuestion","editAnswer","exact","path","Pangul","showLoginForm","showContent","test","showTestContent","showMainContent","testContent","backendUrl","appTestContent","App","isLocalhost","Boolean","hostname","register","navigator","URL","process","toString","origin","addEventListener","swUrl","serviceWorker","ready","registration","unregister","reload","registerValidSW","catch","checkValidServiceWorker","onupdatefound","installingWorker","installing","onstatechange","document","getElementById","registerServiceWorker"],"mappings":"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","file":"static/js/main.703c3819.chunk.js","sourcesContent":["import {Subject} from \"rxjs\";\r\n\r\nexport default class Stateful {\r\n    public parent: Stateful | null;\r\n\r\n    public props: { [key: string]: any };\r\n\r\n    public error: Error | null;\r\n\r\n    public updating: boolean;\r\n\r\n    /** If a deep update is taking place (eg. update in update), resolve it using this */\r\n    private updateDepth = 0;\r\n\r\n    /** The internal observer for this object's props */\r\n    private observer = new Subject<Stateful>();\r\n\r\n    constructor(state?: { [key: string]: any }) {\r\n        this.error = null;\r\n        this.updating = false;\r\n        this.parent = null;\r\n        this.props = {};\r\n        this._unsafeAssignState(state);\r\n    }\r\n\r\n    /**\r\n     * Subscribe to updates on this object.\r\n     * @param onUpdate The action to invoke on an update.\r\n     * @return A closure to unsubscribe.\r\n     */\r\n    public subscribe(onUpdate: () => void): () => void {\r\n        const subscriber = this.observer.subscribe(onUpdate);\r\n        return () => {\r\n            subscriber.unsubscribe();\r\n        };\r\n    }\r\n\r\n    /** Update the object, or least make some attempt to do so */\r\n    public async update(asyncUpdateAction: () => Promise<{ [key: string]: any } | undefined | null>): Promise<void> {\r\n        this._startUpdate();\r\n        try {\r\n            const delta = await asyncUpdateAction();\r\n            if (delta) {\r\n                this.props = {...this.props, ...delta};\r\n            }\r\n        } catch (error) {\r\n            this.error = error;\r\n        }\r\n        this._completedUpdate();\r\n    }\r\n\r\n    public _startUpdate() {\r\n        this.updateDepth += 1;\r\n        this.updating = true;\r\n        this.error = null;\r\n        if (this.updateDepth === 1) {\r\n            this.observer.next(this);\r\n        }\r\n        if (this.parent) {\r\n            this.parent._startUpdate();\r\n        }\r\n    }\r\n\r\n    public _completedUpdate() {\r\n        this.updateDepth -= 1;\r\n        if (this.updateDepth === 0) {\r\n            this.updating = false;\r\n            if (this.parent) {\r\n                this.parent._completedUpdate();\r\n            }\r\n            this.observer.next(this);\r\n        }\r\n    }\r\n\r\n    protected _unsafeAssignState(state?: { [key: string]: any }) {\r\n        if (state) {\r\n            this.props = state;\r\n            try {\r\n                for (const entry of Object.entries(state)) {\r\n                    if (entry[1] instanceof Stateful) {\r\n                        entry[1].parent = this;\r\n                    }\r\n                }\r\n            } catch (_) {\r\n                // props wasn't a map.\r\n            }\r\n        }\r\n    }\r\n}\r\n","import Stateful from \"./stateful\";\r\n\r\nexport abstract class Model<TState> extends Stateful {\r\n    public constructor(state?: TState) {\r\n        super(state || {});\r\n        if (!state) {\r\n            this._unsafeAssignState(this.blank());\r\n        }\r\n        this.rebind();\r\n    }\r\n\r\n    public get state(): TState {\r\n        return this.props as TState;\r\n    }\r\n\r\n    /** Update the state and rebind parent elements */\r\n    public async update(asyncUpdateAction: () => Promise<{ [key: string]: any } | undefined | null>): Promise<void> {\r\n        await super.update(asyncUpdateAction);\r\n        this.rebind();\r\n    }\r\n\r\n    /** Return a blank instance of TState */\r\n    protected abstract blank(): TState;\r\n\r\n    /** Rebind all child elements to have this as a parent */\r\n    protected abstract rebind(): void;\r\n}\r\n","import {Model} from \"../../../react-stateful/src/model\";\r\n\r\nexport interface IUserContext {\r\n    loggedIn: boolean;\r\n    username: string;\r\n    permissions: string[];\r\n}\r\n\r\nexport class UserContext extends Model<IUserContext> {\r\n    /** Reset to the default state */\r\n    public async reset(): Promise<void> {\r\n        await this.update(async () => {\r\n            return this.blank();\r\n        });\r\n    }\r\n\r\n    protected blank(): IUserContext {\r\n        return {\r\n            loggedIn: false,\r\n            permissions: [],\r\n            username: \"anonymous user\",\r\n        };\r\n    }\r\n\r\n    protected rebind(): void {\r\n        // No bindings\r\n    }\r\n}\r\n","import * as React from \"react\";\r\nimport \"./layoutTheme.css\";\r\n\r\nexport class LayoutTheme extends React.Component {\r\n    public render() {\r\n        return (\r\n            <div className=\"component--LayoutTheme\">\r\n                {this.props.children}\r\n            </div>\r\n        );\r\n    }\r\n}","export default abstract class Provider<T> {\r\n    public get(): T {\r\n        const instance = this.provide();\r\n        if (!instance) {\r\n            throw new Error(\"Provider not configured\");\r\n        }\r\n        return instance;\r\n    }\r\n\r\n    protected abstract provide(): T | null;\r\n}","import ProviderFactory from \"../infrastructure/providers/providerFactory\";\r\nimport ILogger from \"../interfaces/logger\";\r\n\r\nexport const LoggerProvider = new ProviderFactory<ILogger>(null);\r\n","import Provider from \"./provider\";\r\n\r\nexport default class ProviderFactory<T> extends Provider<T> {\r\n    public constructor(private factory: (() => T) | null) {\r\n        super();\r\n    }\r\n\r\n    public configure(factory: () => T) {\r\n        this.factory = factory;\r\n    }\r\n\r\n    protected provide(): T | null {\r\n        return this.factory == null ? null : this.factory();\r\n    }\r\n}\r\n","export default class StandardError extends Error {\r\n    public innerErrors: { [key: string]: string } = {};\r\n    constructor(message: string, errors: { [key: string]: string }) {\r\n        super(message); // (1)\r\n        this.innerErrors = errors;\r\n    }\r\n}\r\n","import \"whatwg-fetch\";\r\nimport IFetch from \"../../interfaces/fetch\";\r\nimport {LoggerProvider} from \"../../providers/loggerProvider\";\r\nimport IStandardResponse from \"../standardResponse\";\r\nimport StandardError from \"./standardError\";\r\n\r\nexport default class AjaxFetch implements IFetch {\r\n    private static serializeRequestBody(body: any): string {\r\n        try {\r\n            return JSON.stringify(body);\r\n        } catch (error) {\r\n            const logger = LoggerProvider.get();\r\n            logger.info(\"Unable to serialize object\", body);\r\n            logger.error(error);\r\n            throw new Error(\"Request failed: Unable to serialize object for POST\");\r\n        }\r\n    }\r\n\r\n    constructor(private rootUrl: string) {\r\n    }\r\n\r\n    public async get<T>(url: string): Promise<T> {\r\n        const response = await fetch(`${this.rootUrl}${url}`, {method: \"GET\"});\r\n        if (!response.ok) {\r\n            throw new Error(response.statusText);\r\n        }\r\n        return response.json();\r\n    }\r\n\r\n    public async post<T>(url: string, body: any): Promise<IStandardResponse<T>> {\r\n        const apiHeaders = new Headers({\r\n            \"Accept\": \"*/*\",\r\n            \"Content-Type\": \"application/json\",\r\n            \"X-Requested-With\": \"PANGUL\",\r\n        });\r\n\r\n        try {\r\n            const raw = AjaxFetch.serializeRequestBody(body);\r\n            const response = await fetch(`${this.rootUrl}${url}`, {\r\n                body: raw,\r\n                cache: \"no-cache\",\r\n                credentials: \"include\",\r\n                headers: apiHeaders,\r\n                method: \"POST\",\r\n                mode: \"cors\",\r\n                redirect: \"follow\",\r\n            });\r\n\r\n            if (!response.ok) {\r\n                try {\r\n                    const errorDetail = await response.json();\r\n                    return {\r\n                        error: new StandardError(errorDetail.result, errorDetail.errors),\r\n                        success: false,\r\n                    };\r\n                } catch (error) {\r\n                    return {\r\n                        error: new Error(`Request failed: ${response.status}: ${response.statusText}`),\r\n                        success: false,\r\n                    };\r\n                }\r\n            }\r\n\r\n            return await response.json();\r\n        } catch (error) {\r\n            return {\r\n                error,\r\n                success: false,\r\n            };\r\n        }\r\n    }\r\n}\r\n","import ILogger from \"../../interfaces/logger\";\r\n\r\nexport default class ConsoleLogger implements ILogger {\r\n    public error(error: any): void {\r\n        if (!error) {\r\n            return;\r\n        }\r\n        (window.console as any).error(error);\r\n    }\r\n\r\n    public info(message?: any, ...optionalParams: any[]): void {\r\n        // @ts-ignore\r\n        // noinspection TsLint\r\n        (window.console as any).log(message, ...optionalParams);\r\n    }\r\n}","import Provider from \"./provider\";\r\n\r\nexport default class ProviderSingleton<T> extends Provider<T> {\r\n    public constructor(private instance: T | null) {\r\n        super();\r\n    }\r\n\r\n    public configure(instance: T) {\r\n        this.instance = instance;\r\n    }\r\n\r\n    protected provide(): T | null {\r\n        return this.instance;\r\n    }\r\n}\r\n","import ProviderSingleton from \"../infrastructure/providers/providerSingleton\";\r\nimport IFetch from \"../interfaces/fetch\";\r\n\r\nexport const FetchProvider = new ProviderSingleton<IFetch>(null);\r\n","import * as React from \"react\";\r\nimport {UserContext} from \"../../../../react-pangul-core/src/domain/userContext\";\r\nimport AjaxFetch from \"../../../../react-pangul-core/src/infrastructure/fetch/ajaxFetch\";\r\nimport ConsoleLogger from \"../../../../react-pangul-core/src/infrastructure/logger/consoleLogger\";\r\nimport ProviderSingleton from \"../../../../react-pangul-core/src/infrastructure/providers/providerSingleton\";\r\nimport { FetchProvider } from \"../../../../react-pangul-core/src/providers/fetchProvider\";\r\nimport { LoggerProvider } from \"../../../../react-pangul-core/src/providers/loggerProvider\";\r\n\r\nexport interface ITestSettings {\r\n    test: boolean;\r\n    testUser: string;\r\n    testUserAuth: string;\r\n    testContent: null | ((user: UserContext) => React.ReactNode);\r\n}\r\n\r\nexport interface ISettings {\r\n    backendUrl: string;\r\n    baseUrl: string;\r\n    footerNotice: string;\r\n    test: ITestSettings;\r\n}\r\n\r\nexport const SettingsProvider = new ProviderSingleton<ISettings>(null);\r\n\r\nexport function configureApplication(settings: ISettings) {\r\n    FetchProvider.configure(new AjaxFetch(settings.backendUrl));\r\n    LoggerProvider.configure(() => new ConsoleLogger());\r\n    SettingsProvider.configure(settings);\r\n}\r\n","import IFetch from \"../interfaces/fetch\";\r\nimport ILogger from \"../interfaces/logger\";\r\nimport {FetchProvider} from \"../providers/fetchProvider\";\r\nimport {LoggerProvider} from \"../providers/loggerProvider\";\r\n\r\nexport class BaseController {\r\n    private get fetch(): IFetch {\r\n        return FetchProvider.get();\r\n    }\r\n\r\n    private get logger(): ILogger {\r\n        return LoggerProvider.get();\r\n    }\r\n\r\n    protected async post<TResponse>(url: string, body: any | null): Promise<TResponse> {\r\n        const response = await this.fetch.post<TResponse>(url, body);\r\n        if (response.success) {\r\n            return response.data as TResponse;\r\n        }\r\n        this.logger.error(response);\r\n        if (response.error != null) {\r\n            throw response.error;\r\n        }\r\n        throw new Error(\"Internal server error\");\r\n    }\r\n}\r\n","import {BaseController} from \"../infrastructure/baseController\";\r\n\r\nexport interface IUserClaims {\r\n    token: string;\r\n    authenticated: boolean;\r\n    claims: string[];\r\n}\r\n\r\nexport class AuthController extends BaseController {\r\n    public async login(username: string, password: string): Promise<void> {\r\n        return await this.post<void>(\"/api/auth/login\", {username, password});\r\n    }\r\n\r\n    public async logout(): Promise<void> {\r\n        return await this.post<void>(\"/api/auth/logout\", null);\r\n    }\r\n\r\n    public async claims(): Promise<IUserClaims> {\r\n        return this.post<IUserClaims>(\"/api/auth/claims\", null);\r\n    }\r\n}\r\n","import {AuthController} from \"../controllers/authController\";\r\nimport {UserContext} from \"../domain/userContext\";\r\n\r\nexport default class AuthService {\r\n\r\n    private authController: AuthController;\r\n\r\n    constructor() {\r\n        this.authController = new AuthController();\r\n    }\r\n\r\n    public async login(context: UserContext, username: string, password: string) {\r\n        await context.update(async () => {\r\n            await this.authController.login(username, password);\r\n            const user = await this.authController.claims();\r\n            return {\r\n                loggedIn: true,\r\n                permissions: user.claims,\r\n                username: user.token,\r\n            };\r\n        });\r\n    }\r\n\r\n    public async logout(context: UserContext) {\r\n        await context.update(async () => {\r\n            await this.authController.logout();\r\n            await context.reset();\r\n            return null;\r\n        });\r\n    }\r\n\r\n    /** Check if a user has the required permissions */\r\n    public hasPermissions(user: UserContext, permissions: string[]): boolean {\r\n        if (permissions.length === 0) {\r\n            return false;\r\n        }\r\n        if (user == null) {\r\n            return false;\r\n        }\r\n        const missingPermissions = permissions.filter((p) => !user.state.permissions.find((i) => i === p));\r\n        return missingPermissions.length === 0;\r\n    }\r\n\r\n    /** Get the current logged in user, if any */\r\n    public async refresh(user: UserContext) {\r\n        await user.update(async () => {\r\n            try {\r\n                const claims = await this.authController.claims();\r\n                return {\r\n                    loggedIn: true,\r\n                    permissions: claims.claims,\r\n                    username: claims.token,\r\n                };\r\n            } catch (error) {\r\n                // Not logged in\r\n                await user.reset();\r\n                return user.state;\r\n            }\r\n        });\r\n    }\r\n}\r\n","import * as React from \"react\";\r\nimport \"./pageLoader.css\";\r\n\r\nexport interface IPageLoader {\r\n    loading: boolean;\r\n}\r\n\r\nexport class PageLoader extends React.Component<IPageLoader> {\r\n    public render() {\r\n        if (!this.props.loading) {\r\n            return <React.Fragment/>;\r\n        }\r\n        return (\r\n            <div className=\"component--PageLoader\">\r\n                <div>\r\n                    loading\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import * as React from \"react\";\r\nimport \"./layoutContentContainer.css\";\r\n\r\nexport class LayoutContentContainer extends React.PureComponent {\r\n    public render() {\r\n        return (\r\n            <div className=\"component--LayoutContentContainer\">\r\n                {this.props.children}\r\n            </div>\r\n        );\r\n    }\r\n}","import * as React from \"react\";\r\nimport * as ReactDOM from \"react-dom\";\r\nimport \"./errorNotice.css\";\r\n\r\nexport interface IErrorLike {\r\n    message: string;\r\n    innerErrors?: { [key: string]: string };\r\n}\r\n\r\nexport interface IErrorNotice {\r\n    error: IErrorLike | null;\r\n}\r\n\r\nexport class ErrorNotice extends React.Component<IErrorNotice> {\r\n    private readonly innerRef: React.RefObject<HTMLDivElement>;\r\n\r\n    constructor(props: IErrorNotice) {\r\n        super(props);\r\n        this.innerRef = React.createRef<HTMLDivElement>();\r\n    }\r\n\r\n    public render() {\r\n        if (!this.props.error) {\r\n            return (<React.Fragment/>);\r\n        }\r\n\r\n        this.scrollAsync();\r\n        return (\r\n            <div className=\"component--ErrorNotice\" ref={this.innerRef}>\r\n                <em>{this.props.error.message}</em>\r\n                {this.renderInnerErrors()}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private renderInnerErrors() {\r\n        if (this.props.error == null || !this.props.error.innerErrors) {\r\n            return \"\";\r\n        }\r\n        const inner = [];\r\n        for (const kv of Object.entries(this.props.error.innerErrors)) {\r\n            inner.push(<li key={kv[0]}>{kv[0]}: {kv[1]}</li>);\r\n        }\r\n        return (\r\n            <ul>\r\n                {inner}\r\n            </ul>\r\n        );\r\n    }\r\n\r\n    private scrollAsync() {\r\n        setTimeout(() => {\r\n            if (this.innerRef.current != null) {\r\n                const errorRef = ReactDOM.findDOMNode(this.innerRef.current);\r\n                (errorRef as Element).scrollIntoView({block: \"end\", behavior: \"smooth\"});\r\n            }\r\n        }, 1);\r\n    }\r\n}\r\n","import * as React from \"react\";\r\nimport {ErrorNotice} from \"../../common/errors/errorNotice/errorNotice\";\r\nimport \"./layoutFormContainer.css\";\r\n\r\nexport interface ILayoutFormContainer {\r\n    error: Error | null;\r\n}\r\n\r\nexport class LayoutFormContainer extends React.Component<ILayoutFormContainer> {\r\n    public render() {\r\n        return (\r\n            <div className=\"component--LayoutFormContainer\">\r\n                <ErrorNotice error={this.props.error}/>\r\n                {this.props.children}\r\n            </div>\r\n        );\r\n    }\r\n}","import * as React from \"react\";\r\nimport \"./layoutRightBox.css\";\r\n\r\nexport interface ILayoutRightBox {\r\n    expand: boolean;\r\n}\r\n\r\nexport class LayoutRightBox extends React.PureComponent<ILayoutRightBox> {\r\n    public render() {\r\n        const position = this.props.expand ? \"static\" : \"absolute\";\r\n        return (\r\n            <div className=\"component--LayoutRightBox\" style={{position}}>\r\n                {this.props.children}\r\n            </div>\r\n        );\r\n    }\r\n}","import * as React from \"react\";\r\nimport {UserContext} from \"../../../../../react-pangul-core/src/domain/userContext\";\r\nimport AuthService from \"../../../../../react-pangul-core/src/services/authService\";\r\nimport {PageLoader} from \"../../../components/common/loaders/pageLoader\";\r\nimport {LayoutContentContainer} from \"../../../components/layout/layoutContentContainer/layoutContentContainer\";\r\nimport {LayoutFormContainer} from \"../../../components/layout/layoutFormContainer/layoutFormContainer\";\r\nimport {LayoutRightBox} from \"../../../components/layout/layoutRightBox/layoutRightBox\";\r\nimport \"./genericLoginPage.css\";\r\n\r\nexport interface IGenericLoginPage {\r\n    user: UserContext;\r\n}\r\n\r\nexport interface IGenericLoginPageState {\r\n    username: string;\r\n    password: string;\r\n}\r\n\r\nexport class GenericLoginPage extends React.Component<IGenericLoginPage, IGenericLoginPageState> {\r\n    public constructor(props: IGenericLoginPage) {\r\n        super(props);\r\n        this.state = {\r\n            password: \"...\",\r\n            username: \"username\",\r\n        };\r\n    }\r\n\r\n    public render() {\r\n        return (\r\n            <div className=\"component--GenericLoginPage\">\r\n                <PageLoader loading={this.props.user.updating}/>\r\n                <LayoutContentContainer>\r\n                    <h3 className=\"notice\">\r\n                        Login required\r\n                    </h3>\r\n                </LayoutContentContainer>\r\n                <LayoutFormContainer error={this.props.user.error}>\r\n                    <form onSubmit={this.onSubmitLogin}>\r\n                        <fieldset>\r\n                            <input type=\"text\" value={this.state.username} onChange={this.onUsernameChange}/>\r\n                        </fieldset>\r\n                        <fieldset>\r\n                            <input type=\"password\" value={this.state.password} onChange={this.onPasswordChange}/>\r\n                        </fieldset>\r\n                        <LayoutRightBox expand={true}>\r\n                            <button>Login</button>\r\n                        </LayoutRightBox>\r\n                    </form>\r\n                </LayoutFormContainer>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private onSubmitLogin = (e: React.FormEvent) => {\r\n        e.preventDefault();\r\n        const service = new AuthService();\r\n        service.login(this.props.user, this.state.username, this.state.password);\r\n    }\r\n\r\n    private onUsernameChange = (e: React.FormEvent<HTMLInputElement>) => {\r\n        this.setState({\r\n            username: e.currentTarget.value,\r\n        });\r\n    }\r\n\r\n    private onPasswordChange = (e: React.FormEvent<HTMLInputElement>) => {\r\n        this.setState({\r\n            password: e.currentTarget.value,\r\n        });\r\n    }\r\n}\r\n","import * as React from \"react\";\r\nimport {UserContext} from \"../../../../react-pangul-core/src/domain/userContext\";\r\nimport AuthService from \"../../../../react-pangul-core/src/services/authService\";\r\n\r\nexport interface IAppAuth {\r\n    user: UserContext;\r\n    renderLoggedIn: () => React.ReactNode;\r\n    renderLoggedOut: () => React.ReactNode;\r\n}\r\n\r\nexport interface IAppAuthState {\r\n    user: UserContext | null;\r\n    refreshed: boolean;\r\n}\r\n\r\nexport class AppAuth extends React.Component<IAppAuth, IAppAuthState> {\r\n    public static getDerivedStateFromProps(props: IAppAuth, state: IAppAuthState) {\r\n        if (props.user !== state.user) {\r\n            return {user: props.user, refreshed: false};\r\n        }\r\n        return null;\r\n    }\r\n\r\n    private unsubscribe: (() => void) | null = null;\r\n\r\n    public constructor(props: IAppAuth) {\r\n        super(props);\r\n        this.state = {\r\n            refreshed: false,\r\n            user: null,\r\n        };\r\n    }\r\n\r\n    public componentWillUnmount() {\r\n        if (this.unsubscribe) {\r\n            this.unsubscribe();\r\n            this.unsubscribe = null;\r\n        }\r\n    }\r\n\r\n    public componentDidMount() {\r\n        this.resubscribe();\r\n    }\r\n\r\n    public render() {\r\n\r\n        const content = this.props.user.state.loggedIn ? this.props.renderLoggedIn() : this.props.renderLoggedOut();\r\n        return (\r\n            <React.Fragment>\r\n                {content}\r\n            </React.Fragment>\r\n        );\r\n    }\r\n\r\n    public componentDidUpdate() {\r\n        if (!this.state.refreshed) {\r\n            this.resubscribe();\r\n        }\r\n    }\r\n\r\n    private resubscribe() {\r\n        if (this.unsubscribe) {\r\n            this.unsubscribe();\r\n            this.unsubscribe = null;\r\n        }\r\n        if (this.state.user) {\r\n            (async () => {\r\n                if (this.state.user) {\r\n                    this.unsubscribe = this.state.user.subscribe(() => {\r\n                        this.forceUpdate();\r\n                    });\r\n\r\n                    // Check for existing login\r\n                    const service = new AuthService();\r\n                    await service.refresh(this.props.user);\r\n                }\r\n            })().then(() => {\r\n                this.setState({refreshed: true});\r\n            });\r\n        }\r\n    }\r\n}\r\n","import * as React from \"react\";\r\nimport * as sanitize from \"sanitize-html\";\r\nimport \"./safeHtml.css\";\r\n\r\nexport interface ISafeHtml {\r\n    value: string;\r\n}\r\n\r\n/**\r\n * Note that we deliberately strip H1 and H2 out of the possible content to stop people\r\n * spamming random stuff into topics. The topic is H1, the answer title is H2.\r\n * Anything else is beyond that.\r\n */\r\nexport class SafeHtml extends React.Component<ISafeHtml> {\r\n    private static safe(value: string) {\r\n        return (sanitize as any)(value, {\r\n            allowProtocolRelative: true,\r\n            allowedAttributes: {\r\n                a: [\"href\", \"name\", \"target\"],\r\n                img: [\"src\"],\r\n            },\r\n            allowedIframeHostnames: [],\r\n            allowedTags: [\r\n                \"h3\", \"h4\", \"h5\", \"h6\", \"blockquote\", \"p\", \"a\", \"ul\", \"ol\",\r\n                \"nl\", \"li\", \"b\", \"i\", \"strong\", \"em\", \"strike\", \"code\", \"hr\", \"br\", \"div\",\r\n                \"table\", \"thead\", \"caption\", \"tbody\", \"tr\", \"th\", \"td\", \"pre\", \"iframe\", \"img\"],\r\n\r\n            allowedSchemes: [\"http\", \"https\"],\r\n            allowedSchemesAppliedToAttributes: [\"href\", \"src\", \"cite\"],\r\n            allowedSchemesByTag: {},\r\n            selfClosing: [\"img\", \"br\", \"hr\", \"area\", \"base\", \"basefont\", \"input\", \"link\", \"meta\"],\r\n        }) as string;\r\n    }\r\n\r\n    public constructor(props: ISafeHtml) {\r\n        super(props);\r\n    }\r\n\r\n    public render() {\r\n        const output = SafeHtml.safe(this.props.value);\r\n        return (\r\n            <div className=\"component--SafeHtml\" dangerouslySetInnerHTML={{__html: output}}/>\r\n        );\r\n    }\r\n\r\n\r\n}\r\n","import * as React from \"react\";\r\nimport * as Showdown from \"showdown\";\r\nimport {ErrorNotice} from \"../../errors/errorNotice/errorNotice\";\r\nimport {SafeHtml} from \"../safeHtml/safeHtml\";\r\n\r\nexport interface ISafeMarkdown {\r\n    markdown: string;\r\n}\r\n\r\nexport class SafeMarkdown extends React.PureComponent<ISafeMarkdown> {\r\n    private converter: Showdown.Converter;\r\n\r\n    constructor(props: ISafeMarkdown) {\r\n        super(props);\r\n        this.converter = new Showdown.Converter();\r\n    }\r\n\r\n    public render() {\r\n        try {\r\n            const html = this.converter.makeHtml(this.props.markdown);\r\n            return (\r\n                <React.Fragment>\r\n                    <SafeHtml value={html}/>\r\n                </React.Fragment>\r\n            );\r\n        } catch (error) {\r\n            return (\r\n                <ErrorNotice error={error}/>\r\n            );\r\n        }\r\n    }\r\n}\r\n","import * as React from \"react\";\r\nimport { SafeMarkdown } from \"../../display/safeMarkdown/safeMarkdown\";\r\nimport \"./markdownEditor.css\";\r\n\r\nexport interface IMarkdownEditor {\r\n    value: string;\r\n    onChange: (body: string) => void;\r\n}\r\n\r\nexport interface IMarkdownEditorState {\r\n    value: string;\r\n    lastPropValue: string;\r\n}\r\n\r\nexport class MarkdownEditor extends React.Component<IMarkdownEditor, IMarkdownEditorState> {\r\n    public static getDerivedStateFromProps(props: IMarkdownEditor, state: IMarkdownEditorState) {\r\n        if (props.value !== state.lastPropValue) {\r\n            return {value: props.value, lastPropValue: props.value};\r\n        }\r\n        return null;\r\n    }\r\n\r\n    private events: { [key: string]: any } = {};\r\n\r\n    constructor(props: IMarkdownEditor) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            lastPropValue: \"\",\r\n            value: \"\",\r\n        };\r\n        this.events = {\r\n            onChange: (e: React.FormEvent<HTMLTextAreaElement>) => this.onChange(e),\r\n        };\r\n    }\r\n\r\n    public render() {\r\n        return (\r\n            <div className=\"component--MarkdownEditor\">\r\n                <textarea value={this.state.value} onChange={this.events.onChange}/>\r\n                <div className=\"rendered\">\r\n                    <SafeMarkdown markdown={this.state.value}/>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Prevent react from jumping the cursor as you type\r\n     */\r\n    private onChange(event: React.FormEvent<HTMLTextAreaElement>) {\r\n        const value = event.currentTarget.value;\r\n        this.setState({value}, () => {\r\n            this.props.onChange(value);\r\n        });\r\n    }\r\n}\r\n","import * as React from \"react\";\r\nimport { Answer } from \"../../../../../react-pangul-core/src/domain/answer\";\r\nimport {MarkdownEditor} from \"../../common/editors/markdownEditor/markdownEditor\";\r\n\r\nexport interface IAnswerForm {\r\n    submit: () => Promise<void>;\r\n    answer: Answer;\r\n    saveText: string;\r\n}\r\n\r\nexport interface IAnswerFormState {\r\n    lastUpdate: Date;\r\n}\r\n\r\nexport class AnswerForm extends React.Component<IAnswerForm> {\r\n    private events: { [id: string]: (data: any) => void } = {};\r\n    private unsubscribe: (() => void) | null = null;\r\n\r\n    public constructor(props: IAnswerForm) {\r\n        super(props);\r\n        this.state = {\r\n            lastUpdate: new Date(),\r\n        };\r\n        this.events = {\r\n            onBodyChanged: (body: string) => this.onBodyChanged(body),\r\n            onSave: (e: React.FormEvent) => this.onSave(e),\r\n        };\r\n    }\r\n\r\n    public componentDidMount() {\r\n        this.unsubscribe = this.props.answer.subscribe(() => {\r\n            this.setState({\r\n                lastUpdate: new Date(),\r\n            });\r\n        });\r\n    }\r\n\r\n    public componentWillUnmount() {\r\n        if (this.unsubscribe) {\r\n            this.unsubscribe();\r\n            this.unsubscribe = null;\r\n        }\r\n    }\r\n\r\n    public render() {\r\n        return (\r\n            <div className=\"component--Answer\">\r\n                <form action=\"\" onSubmit={this.events.onSave}>\r\n                    <fieldset>\r\n                        <MarkdownEditor value={this.props.answer.state.body} onChange={this.events.onBodyChanged}/>\r\n                    </fieldset>\r\n                    <fieldset className=\"buttons\">\r\n                        <button className=\"submit\">{this.props.saveText}</button>\r\n                    </fieldset>\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private onSave(e: React.FormEvent) {\r\n        e.preventDefault();\r\n        this.props.submit();\r\n    }\r\n\r\n    private onBodyChanged(body: string) {\r\n        this.props.answer.update(async () => {\r\n            return {body};\r\n        });\r\n    }\r\n}\r\n","import * as React from \"react\";\r\nimport * as ReactDOM from \"react-dom\";\r\nimport \"./infoNotice.css\";\r\n\r\nexport interface IInfoNotice {\r\n    value: string | null;\r\n}\r\n\r\nexport class InfoNotice extends React.Component<IInfoNotice> {\r\n    private readonly innerRef: React.RefObject<HTMLDivElement>;\r\n\r\n    constructor(props: IInfoNotice) {\r\n        super(props);\r\n        this.innerRef = React.createRef<HTMLDivElement>();\r\n    }\r\n\r\n    public render() {\r\n        if (!this.props.value) {\r\n            return (<React.Fragment/>);\r\n        }\r\n\r\n        this.scrollAsync();\r\n        return (\r\n            <div className=\"component--InfoNotice\" ref={this.innerRef}>\r\n                {this.props.value}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private scrollAsync() {\r\n        setTimeout(() => {\r\n            if (this.innerRef.current != null) {\r\n                const errorRef = ReactDOM.findDOMNode(this.innerRef.current);\r\n                (errorRef as Element).scrollIntoView({block: \"end\", behavior: \"smooth\"});\r\n            }\r\n        }, 1);\r\n    }\r\n}\r\n","import { IQueryResult } from \"../domain/querySet\";\r\nimport { BaseController } from \"../infrastructure/baseController\";\r\n\r\nexport interface ITopic {\r\n    topicId: string;\r\n    name: string;\r\n    description: string;\r\n    icon: string | null;\r\n    rowVersion: string;\r\n}\r\n\r\nexport interface ITopicId {\r\n    topicId: string;\r\n}\r\n\r\nexport class TopicsController extends BaseController {\r\n    public async delete(state: ITopic): Promise<void> {\r\n        return await this.post<void>(\"/api/topics/delete\", {\r\n            RowVersion: state.rowVersion,\r\n            TopicId: state.topicId,\r\n        });\r\n    }\r\n\r\n    public async get(name: string, id: string | null): Promise<ITopic> {\r\n        if (id) {\r\n            return await this.post<ITopic>(\"/api/topics/get\", {\r\n                TopicId: id,\r\n            });\r\n        }\r\n        return await this.post<ITopic>(\"/api/topics/get\", {\r\n            TopicName: name,\r\n        });\r\n    }\r\n\r\n    public async update(state: ITopic): Promise<ITopicId> {\r\n        return await this.post<ITopic>(\"/api/topics/update\", state);\r\n    }\r\n\r\n    public async search(query: string, offset: number, limit: number): Promise<IQueryResult> {\r\n        return await this.post<IQueryResult>(\"/api/topics/search\", {\r\n            limit,\r\n            offset,\r\n            query,\r\n        });\r\n    }\r\n}\r\n","import {Model} from \"../../../react-stateful/src/model\";\r\nimport Stateful from \"../../../react-stateful/src/stateful\";\r\n\r\nexport interface IQueryResult {\r\n    identityList: string[];\r\n    moreResults: boolean;\r\n}\r\n\r\nexport interface IQueryFunc<TModel> {\r\n    query: string;\r\n    fetchIds: (query: string, offset: number, limit: number) => Promise<IQueryResult>;\r\n    fetchInstance: (identity: string) => Promise<TModel>;\r\n    pageSize: number;\r\n}\r\n\r\nexport interface IQuery<TModel> extends IQueryLike {\r\n    query: string;\r\n    fetchIds: (query: string, offset: number, limit: number) => Promise<IQueryResult>;\r\n    fetchInstance: (identity: string) => Promise<TModel>;\r\n    instances: TModel[];\r\n}\r\n\r\nexport interface IQueryLike {\r\n    page: number;\r\n    pageSize: number;\r\n    moreResults: boolean;\r\n}\r\n\r\nexport class QuerySet<TModel extends Stateful> extends Model<IQuery<TModel>> {\r\n\r\n    /** Create a queryset from a model, and maybe load a specific page */\r\n    public static async fromQuery<TModel extends Stateful>(query: IQueryFunc<TModel>, page?: number) {\r\n        const querySet = new QuerySet<TModel>({\r\n            ...query,\r\n            instances: [],\r\n            moreResults: false,\r\n            page: -1,\r\n        });\r\n\r\n        if (page !== null && page !== undefined) {\r\n            await querySet.fetch(page);\r\n        }\r\n\r\n        return querySet;\r\n    }\r\n\r\n    /** Fetch a specific page */\r\n    public fetch(page: number): Promise<void> {\r\n        return this.update(async () => {\r\n            const offset = page <= 0 ? 0 : page * this.state.pageSize;\r\n            const queryResult = await this.state.fetchIds(this.state.query, offset, this.state.pageSize);\r\n            const deferred = queryResult.identityList.map((id) => this.state.fetchInstance(id));\r\n            const instances = await Promise.all(deferred);\r\n            return {\r\n                instances,\r\n                moreResults: queryResult.moreResults,\r\n                page,\r\n            };\r\n        });\r\n    }\r\n\r\n    /** Next page */\r\n    public async next() {\r\n        await this.update(async () => {\r\n            if (!this.state.moreResults) {\r\n                throw new Error(\"No more results in QuerySet\");\r\n            }\r\n            return null;\r\n        });\r\n        if (!this.error) {\r\n            await this.fetch(this.state.page + 1);\r\n        }\r\n    }\r\n\r\n    /** Previous page */\r\n    public async prev() {\r\n        await this.update(async () => {\r\n            if (this.state.page <= 0) {\r\n                throw new Error(\"Already on first page of QuerySet\");\r\n            }\r\n            return null;\r\n        });\r\n        if (!this.error) {\r\n            await this.fetch(this.state.page - 1);\r\n        }\r\n    }\r\n\r\n    protected blank(): IQuery<TModel> {\r\n        return {\r\n            fetchIds: () => Promise.reject(new Error(\"Not implemented\")),\r\n            fetchInstance: () => Promise.reject(new Error(\"Not implemented\")),\r\n            instances: [],\r\n            moreResults: false,\r\n            page: 0,\r\n            pageSize: 10,\r\n            query: \"\",\r\n        };\r\n    }\r\n\r\n    protected rebind(): void {\r\n        this.state.instances.map((i) => {\r\n            i.parent = this;\r\n        });\r\n    }\r\n}","import {Model} from \"../../../react-stateful/src/model\";\r\nimport {TopicsController} from \"../controllers/topicsController\";\r\nimport {IQueryResult, QuerySet} from \"./querySet\";\r\n\r\nexport interface ITopic {\r\n    topicId: string;\r\n    name: string;\r\n    icon: string | null;\r\n    description: string;\r\n    rowVersion: string;\r\n}\r\n\r\nexport class Topic extends Model<ITopic> {\r\n    /** Return an instance */\r\n    public static async get(name: string): Promise<Topic> {\r\n        const topic = new Topic();\r\n        topic.state.name = name;\r\n        await topic.refresh();\r\n        return topic;\r\n    }\r\n\r\n    /** Search for topics */\r\n    public static search(query: string, pageSize: number = 10, page: number = 0): Promise<QuerySet<Topic>> {\r\n        return QuerySet.fromQuery({\r\n            fetchIds: Topic.searchForIds,\r\n            fetchInstance: Topic.getById,\r\n            pageSize,\r\n            query,\r\n        }, page);\r\n    }\r\n\r\n    /** Return an instance by id */\r\n    private static async getById(topicId: string): Promise<Topic> {\r\n        const topic = new Topic();\r\n        topic.state.topicId = topicId;\r\n        await topic.refresh();\r\n        return topic;\r\n    }\r\n\r\n    private static async searchForIds(query: string, offset: number, limit: number): Promise<IQueryResult> {\r\n        const controller = new TopicsController();\r\n        return await controller.search(query, offset, limit);\r\n    }\r\n\r\n    public async delete(): Promise<void> {\r\n        const controller = new TopicsController();\r\n        await this.update(async () => {\r\n            await controller.delete(this.state);\r\n            return this.blank();\r\n        });\r\n    }\r\n\r\n    /** Refresh a answer instance */\r\n    public async refresh(): Promise<void> {\r\n        await this.update(async () => await this.fetchData(this.state.name, this.state.topicId));\r\n    }\r\n\r\n    /** Reset to the default state */\r\n    public async reset(): Promise<void> {\r\n        await this.update(async () => {\r\n            return this.blank();\r\n        });\r\n    }\r\n\r\n    /** Save the state */\r\n    public async save(): Promise<void> {\r\n        const controller = new TopicsController();\r\n        await this.update(async () => {\r\n            const simpleState = {\r\n                ...this.state,\r\n            };\r\n            if (!this.state.topicId) {\r\n                throw new Error(\"Topics can only be auto-generated, use Topic.get\");\r\n            }\r\n            await controller.update(simpleState);\r\n            return await this.fetchData(this.state.name, null);\r\n        });\r\n    }\r\n\r\n    protected blank(): ITopic {\r\n        return {\r\n            description: \"\",\r\n            icon: \"\",\r\n            name: \"\",\r\n            rowVersion: \"\",\r\n            topicId: \"\",\r\n        };\r\n    }\r\n\r\n    protected async fetchData(name: string, topicId: string | null): Promise<ITopic> {\r\n        const controller = new TopicsController();\r\n        const data = await controller.get(name, topicId);\r\n        return data;\r\n    }\r\n\r\n    protected rebind(): void {\r\n        // No child elements\r\n    }\r\n}\r\n","import {SettingsProvider} from \"./settingsProvider\";\r\n\r\nexport default class NavigationService {\r\n    private readonly root: string;\r\n\r\n    constructor() {\r\n        this.root = SettingsProvider.get().baseUrl;\r\n        if (this.root.endsWith(\"/\")) {\r\n            this.root = this.root.replace(/\\/*$/, \"\");\r\n        }\r\n    }\r\n\r\n    public urlForAnswerEdit(topic: string, questionId: string, answerId: string) {\r\n        return `${this.root}/t/${topic}/${questionId}/answer/${answerId}/edit`;\r\n    }\r\n\r\n    public urlForQuestion(topic: string, questionId: string): string {\r\n        return `${this.root}/t/${topic}/${questionId}`;\r\n    }\r\n\r\n    public urlForQuestionEdit(topic: string, questionId: string): string {\r\n        return `${this.root}/t/${topic}/${questionId}/edit`;\r\n    }\r\n\r\n    public urlForTopic(topic: string) {\r\n        return `${this.root}/t/${topic}`;\r\n    }\r\n\r\n    public urlForTopicEdit(topic: string) {\r\n        return `${this.root}/t/${topic}/edit`;\r\n    }\r\n\r\n    public urlForTopicAddQuestion(topic: string) {\r\n        return `${this.root}/t/${topic}/ask`;\r\n    }\r\n\r\n    public urlForQuestionAnswer(topic: string, questionId: string): string {\r\n        return `${this.root}/t/${topic}/${questionId}/answer`;\r\n    }\r\n\r\n    public urlForHelp() {\r\n        return `${this.root}/help`;\r\n    }\r\n\r\n    public urlForRoot() {\r\n        return `${this.root}`;\r\n    }\r\n\r\n    public urlForLogout() {\r\n        return `${this.root}/logout`;\r\n    }\r\n\r\n    public urlForSelfProfile() {\r\n        return `${this.root}/self`;\r\n    }\r\n\r\n    public urlForTopicQuery(topic: any, query: string) {\r\n        return `${this.root}/t/${topic}/search/${query}`;\r\n    }\r\n\r\n    public redirect(url: string) {\r\n        window.location.href = url;\r\n    }\r\n}\r\n","import * as React from \"react\";\r\nimport {Link} from \"react-router-dom\";\r\nimport NavigationService from \"../../../infrastructure/service/navigationService\";\r\nimport \"./topicLink.css\";\r\n\r\nexport enum TopicLinkType {\r\n    AddQuestion,\r\n    View,\r\n    Edit,\r\n    None,\r\n}\r\n\r\nexport interface ITopicLink {\r\n    target: TopicLinkType;\r\n    topic: string;\r\n}\r\n\r\nexport class TopicLink extends React.Component<ITopicLink> {\r\n    private nav: NavigationService;\r\n\r\n    public constructor(props: ITopicLink) {\r\n        super(props);\r\n        this.nav = new NavigationService();\r\n    }\r\n\r\n    public render() {\r\n        if (!this.props.topic) {\r\n            return (<React.Fragment/>);\r\n        }\r\n        const linkUrl = this.getUrl();\r\n        return (\r\n            <div className=\"component--TopicLink\">\r\n                <Link to={linkUrl}>{this.props.children}</Link>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private getUrl(): string {\r\n        switch (this.props.target) {\r\n            case TopicLinkType.AddQuestion:\r\n                return this.nav.urlForTopicAddQuestion(this.props.topic);\r\n            case TopicLinkType.View:\r\n                return this.nav.urlForTopic(this.props.topic);\r\n            case TopicLinkType.Edit:\r\n                return this.nav.urlForTopicEdit(this.props.topic);\r\n            case TopicLinkType.None:\r\n                return this.nav.urlForRoot();\r\n            default:\r\n                throw new Error(\"Unsupported target\");\r\n        }\r\n    }\r\n}\r\n","import * as React from \"react\";\r\nimport {ITopic} from \"../../../../../react-pangul-core/src/domain/topic\";\r\nimport {TopicLink, TopicLinkType} from \"../topicLink/topicLink\";\r\nimport \"./topicInfo.css\";\r\n\r\nconst TopicDescription = (props: ITopic) => {\r\n    if (props.topicId) {\r\n        const desc = props.description || \"no description\";\r\n        return (\r\n            <div className=\"desc\">\r\n                <TopicLink target={TopicLinkType.Edit} topic={props.name}>\r\n                    {desc}\r\n                </TopicLink>\r\n            </div>\r\n        );\r\n    }\r\n    return (\r\n        <div className=\"desc\"/>\r\n    );\r\n};\r\n\r\nconst TopicIcon = (props: ITopic) => {\r\n    if (!props.icon) {\r\n        return <React.Fragment/>;\r\n    }\r\n    return (\r\n        <div className=\"icon\">\r\n            <img src={props.icon}/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport class TopicInfo extends React.Component<ITopic> {\r\n    public render() {\r\n        const name = this.props.name || \"no topic\";\r\n        const type = this.props.name ? TopicLinkType.View : TopicLinkType.None;\r\n        return (\r\n            <div className=\"component--TopicInfo\">\r\n                <TopicIcon {...this.props}/>\r\n                <div>\r\n                    <TopicLink target={type} topic={name}>\r\n                        <h1 className=\"header\">{name}</h1>\r\n                    </TopicLink>\r\n                    <TopicDescription {...this.props}/>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import * as React from \"react\";\r\nimport {Link} from \"react-router-dom\";\r\nimport {IUserContext} from \"../../../../../react-pangul-core/src/domain/userContext\";\r\nimport NavigationService from \"../../../infrastructure/service/navigationService\";\r\nimport \"./userCurrentInfo.css\";\r\n\r\nexport interface IUserCurrentInfo {\r\n    user: IUserContext;\r\n\r\n}\r\n\r\nexport class UserCurrentInfo extends React.Component<IUserCurrentInfo> {\r\n    private readonly nav = new NavigationService();\r\n\r\n    public render() {\r\n        return (\r\n            <div className=\"component--UserCurrentInfo\">\r\n                <div>\r\n                    <Link to={this.nav.urlForSelfProfile()}>{this.props.user.username}</Link>\r\n                </div>\r\n                <div className=\"logout\">\r\n                    <Link to={this.nav.urlForLogout()}>logout</Link>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import * as React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport NavigationService from \"../../../infrastructure/service/navigationService\";\r\nimport { SettingsProvider } from \"../../../infrastructure/service/settingsProvider\";\r\nimport \"./layoutFooter.css\";\r\n\r\nexport class LayoutFooter extends React.PureComponent {\r\n    public render() {\r\n        const settings = SettingsProvider.get();\r\n        const nav = new NavigationService();\r\n        return (\r\n            <div className=\"component--LayoutFooter\">\r\n                <div>\r\n                    <div className=\"message\">\r\n                        {settings.footerNotice}\r\n                    </div>\r\n                    <div className=\"home\">\r\n                        <Link to={nav.urlForRoot()}>Home</Link>\r\n                    </div>\r\n                    <div className=\"help\">\r\n                        <Link to={nav.urlForHelp()}>Help</Link>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import * as React from \"react\";\r\nimport { ITopic, Topic } from \"../../../../../react-pangul-core/src/domain/topic\";\r\nimport { IUserContext } from \"../../../../../react-pangul-core/src/domain/userContext\";\r\nimport { PageLoader } from \"../../common/loaders/pageLoader\";\r\nimport { TopicInfo } from \"../../topic/topicInfo/topicInfo\";\r\nimport { UserCurrentInfo } from \"../../user/userCurrentInfo/userCurrentInfo\";\r\nimport { LayoutFooter } from \"../layoutFooter/layoutFooter\";\r\nimport \"./layoutStandardHeader.css\";\r\n\r\nexport interface ILayoutStandardHeader {\r\n    user: IUserContext;\r\n    topic: ITopic | null;\r\n    loading: boolean;\r\n}\r\n\r\nexport class LayoutStandardHeader extends React.Component<ILayoutStandardHeader> {\r\n    public render() {\r\n        const topic = this.props.topic || new Topic().state;\r\n        return (\r\n            <React.Fragment>\r\n                <div className=\"component--LayoutStandardHeader\">\r\n                    <PageLoader loading={this.props.loading}/>\r\n                    <TopicInfo {...topic} />\r\n                    <UserCurrentInfo user={this.props.user}/>\r\n                </div>\r\n                <LayoutFooter/>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n","import * as React from \"react\";\r\nimport {Link} from \"react-router-dom\";\r\nimport {Question} from \"../../../../../react-pangul-core/src/domain/question\";\r\nimport {QuestionSummary} from \"../../../../../react-pangul-core/src/domain/questionSummary\";\r\nimport NavigationService from \"../../../infrastructure/service/navigationService\";\r\nimport \"./questionLink.css\";\r\n\r\nexport enum QuestionLinkType {\r\n    Answer,\r\n    View,\r\n    Edit,\r\n}\r\n\r\nexport interface IQuestionLink {\r\n    question: Question | QuestionSummary;\r\n    target: QuestionLinkType;\r\n}\r\n\r\nexport class QuestionLink extends React.Component<IQuestionLink> {\r\n    private nav: NavigationService;\r\n\r\n    public constructor(props: IQuestionLink) {\r\n        super(props);\r\n        this.nav = new NavigationService();\r\n    }\r\n\r\n    public render() {\r\n        if (!this.props.question) {\r\n            return (<React.Fragment/>);\r\n        }\r\n        const linkUrl = this.getUrl();\r\n\r\n        return (\r\n            <Link to={linkUrl}>{this.props.children}</Link>\r\n        );\r\n    }\r\n\r\n    private getUrl(): string {\r\n        const topicName = this.props.question.state.topic;\r\n        const questionId = this.props.question.state.questionId;\r\n        switch (this.props.target) {\r\n            case QuestionLinkType.View:\r\n                return this.nav.urlForQuestion(topicName, questionId);\r\n            case QuestionLinkType.Edit:\r\n                return this.nav.urlForQuestionEdit(topicName, questionId);\r\n            case QuestionLinkType.Answer:\r\n                return this.nav.urlForQuestionAnswer(topicName, questionId);\r\n            default:\r\n                throw new Error(\"Unsupported target\");\r\n        }\r\n    }\r\n}\r\n","import * as React from \"react\";\r\nimport \"./layoutRightBottom.css\";\r\n\r\nexport class LayoutRightBottom extends React.PureComponent {\r\n    public render() {\r\n        return (\r\n            <div className=\"component--LayoutRightBottom\">\r\n                {this.props.children}\r\n            </div>\r\n        );\r\n    }\r\n}","import * as React from \"react\";\r\n\r\nexport interface ILayoutIf {\r\n    show: boolean | string;\r\n}\r\n\r\nexport class LayoutIf extends React.PureComponent<ILayoutIf> {\r\n    public render() {\r\n        if (!this.props.show) {\r\n            return <React.Fragment/>;\r\n        }\r\n        return (\r\n            <React.Fragment>\r\n                {this.props.children}\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n","import * as React from \"react\";\r\nimport {LayoutIf} from \"../../layout/layoutIf/layoutIf\";\r\nimport \"./votesAndStars.css\";\r\n\r\nexport interface IVotesAndStars {\r\n    votes: number;\r\n    userVotes: number;\r\n    userStars: number;\r\n    showStars: boolean;\r\n    onVote: (votes: number) => Promise<void>;\r\n    onStar: ((stars: number) => Promise<void>) | null;\r\n}\r\n\r\nexport class VotesAndStars extends React.Component<IVotesAndStars> {\r\n    public render() {\r\n        const upStyles = this.props.userVotes > 0 ? [\"up\", \"active\"] : [\"up\"];\r\n        const downStyles = this.props.userVotes < 0 ? [\"down\", \"active\"] : [\"down\"];\r\n        const starStyles = this.props.userStars > 0 ? [\"star\", \"active\"] : [\"star\"];\r\n        return (\r\n            <div className=\"component--VotesAndStars\">\r\n                <li>\r\n                    <div className={upStyles.join(\" \")} onClick={this.onVoteUp}/>\r\n                </li>\r\n                <li>\r\n                    <div className=\"votes\">{this.props.votes}</div>\r\n                </li>\r\n                <li>\r\n                    <div className={downStyles.join(\" \")} onClick={this.onVoteDown}/>\r\n                </li>\r\n                <LayoutIf show={this.props.showStars}>\r\n                    <li className=\"star-container\">\r\n                        <div className={starStyles.join(\" \")} onClick={this.onStar}/>\r\n                    </li>\r\n                </LayoutIf>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private onVoteUp = async () => {\r\n        if (this.props.userVotes === 1) {\r\n            await this.props.onVote(0);\r\n        } else {\r\n            await this.props.onVote(1);\r\n        }\r\n    }\r\n\r\n    private onVoteDown = async () => {\r\n        if (this.props.userVotes === -1) {\r\n            await this.props.onVote(0);\r\n        } else {\r\n            await this.props.onVote(-1);\r\n        }\r\n    }\r\n\r\n    private onStar = async () => {\r\n        if (!this.props.showStars || !this.props.onStar) {\r\n            return;\r\n        }\r\n        if (this.props.userStars > 0) {\r\n            await this.props.onStar(0);\r\n        } else {\r\n            await this.props.onStar(1);\r\n        }\r\n    }\r\n}\r\n","import * as React from \"react\";\r\nimport \"./tagList.css\";\r\nimport NavigationService from \"../../../infrastructure/service/navigationService\";\r\nimport {Link} from \"react-router-dom\";\r\n\r\nexport interface ITagList {\r\n    tags: string[];\r\n    topic: string | null;\r\n}\r\n\r\nexport class TagList extends React.Component<ITagList> {\r\n    private nav: NavigationService;\r\n\r\n    constructor(props: ITagList) {\r\n        super(props);\r\n        this.nav = new NavigationService();\r\n    }\r\n\r\n    public render() {\r\n        // TODO: Make tag pages and link to them\r\n        const tags = this.props.tags.map((i) => {\r\n            // In some cases, eg. tag picker, these shouldn't be clickable.\r\n            if (this.props.topic == null) {\r\n                return (\r\n                    <div key={i} className=\"tag\">\r\n                        {i}\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            // But in most cases, they should link to the associated topic query\r\n            const linkUrl = this.nav.urlForTopicQuery(this.props.topic, `tag:${i}`);\r\n            return (\r\n                <div key={i} className=\"tag\">\r\n                    <Link to={linkUrl}>\r\n                        {i}\r\n                    </Link>\r\n                </div>\r\n            );\r\n        });\r\n        if (tags.length === 0) {\r\n            return <React.Fragment/>;\r\n        }\r\n        return (\r\n            <div className=\"component--TagList\">\r\n                {this.props.tags.length > 0 ? tags : \"No tags\"}\r\n            </div>\r\n        );\r\n    }\r\n}","import * as React from \"react\";\r\nimport {UserView} from \"../../../../../react-pangul-core/src/domain/userView\";\r\nimport \"./userSummary.css\";\r\n\r\nexport interface IUserSummary {\r\n    user: UserView;\r\n}\r\n\r\nexport class UserSummary extends React.PureComponent<IUserSummary> {\r\n    public render() {\r\n        return (\r\n            <div className=\"component--UserSummary\">\r\n                by: {this.props.user.state.username}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import * as React from \"react\";\r\nimport {Question} from \"../../../../../react-pangul-core/src/domain/question\";\r\nimport {SafeMarkdown} from \"../../common/display/safeMarkdown/safeMarkdown\";\r\nimport {LayoutRightBottom} from \"../../layout/layoutRightBottom/layoutRightBottom\";\r\nimport {VotesAndStars} from \"../../metadata/votesAndStars/votesAndStars\";\r\nimport {TagList} from \"../../tag/tagList/tagList\";\r\nimport {UserSummary} from \"../../user/userSummary/userSummary\";\r\nimport \"./questionView.css\";\r\n\r\nexport interface IQuestionView {\r\n    question: Question;\r\n}\r\n\r\nexport class QuestionView extends React.Component<IQuestionView> {\r\n    public render() {\r\n        const meta = this.props.question.state.meta;\r\n        return (\r\n            <div className=\"component--QuestionView\">\r\n                <div className=\"metadata\">\r\n                    <VotesAndStars showStars={true}\r\n                                   userStars={meta.state.star ? 1 : 0}\r\n                                   userVotes={meta.state.votes}\r\n                                   votes={meta.state.global.votes}\r\n                                   onVote={this.onVote}\r\n                                   onStar={this.onStar}/>\r\n                </div>\r\n                <div className=\"output\">\r\n                    <h2>{this.props.question.state.title}</h2>\r\n                    <TagList tags={this.props.question.state.tags} topic={this.props.question.state.topic}/>\r\n                    <SafeMarkdown markdown={this.props.question.state.body}/>\r\n                    <LayoutRightBottom>\r\n                        <UserSummary user={this.props.question.state.user}/>\r\n                    </LayoutRightBottom>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private onVote = async (votes: number) => {\r\n        if (votes > 0) {\r\n            await this.props.question.state.meta.voteUp();\r\n        } else if (votes < 0) {\r\n            await this.props.question.state.meta.voteDown();\r\n        } else {\r\n            await this.props.question.state.meta.voteNeutral();\r\n        }\r\n    }\r\n\r\n    private onStar = async (stars: number) => {\r\n        if (stars) {\r\n            await this.props.question.state.meta.addStar();\r\n        } else {\r\n            await this.props.question.state.meta.removeStar();\r\n        }\r\n    }\r\n}\r\n","import {IAnswerMeta} from \"../domain/answerMeta\";\r\nimport {IQueryResult} from \"../domain/querySet\";\r\nimport {BaseController} from \"../infrastructure/baseController\";\r\n\r\ninterface IAnswerId {\r\n    answerId: string;\r\n}\r\n\r\ninterface IAnswerNew {\r\n    questionId: string;\r\n    body: string;\r\n}\r\n\r\nexport interface IAnswerData {\r\n    userId: string;\r\n    questionId: string;\r\n    answerId: string;\r\n    body: string;\r\n    canEdit: boolean;\r\n    rowVersion: string;\r\n}\r\n\r\nexport class AnswersController extends BaseController {\r\n    public async add(answer: IAnswerNew): Promise<IAnswerId> {\r\n        return await this.post<IAnswerId>(\"/api/Answers/add\", answer);\r\n    }\r\n\r\n    public async delete(answerId: string) {\r\n        return await this.post<IAnswerData>(\"/api/Answers/delete\", {id: answerId});\r\n    }\r\n\r\n    public async get(answerId: string): Promise<IAnswerData> {\r\n        return await this.post<IAnswerData>(\"/api/Answers/get\", {id: answerId});\r\n    }\r\n\r\n    public async getMetadata(answerId: string) {\r\n        return await this.post<IAnswerMeta>(\"/api/Answers/metadata\", {id: answerId});\r\n    }\r\n\r\n    public async updateMetadata(metadata: IAnswerMeta) {\r\n        return await this.post<void>(\"/api/Answers/updateMetadata\", metadata);\r\n    }\r\n\r\n    public async update(Answer: IAnswerData): Promise<IAnswerId> {\r\n        return await this.post<IAnswerId>(\"/api/Answers/update\", Answer);\r\n    }\r\n\r\n    public async search(questionId: string, offset: number, limit: number): Promise<IQueryResult> {\r\n        return await this.post<IQueryResult>(\"/api/Answers/search\", {\r\n            limit,\r\n            offset,\r\n            questionId,\r\n        });\r\n    }\r\n\r\n}\r\n","import {Model} from \"../../../react-stateful/src/model\";\r\nimport {AnswersController} from \"../controllers/answersController\";\r\n\r\nexport interface IAnswerGlobalMeta {\r\n    votes: number;\r\n}\r\n\r\nexport interface IAnswerMeta {\r\n    answerMetaId: string;\r\n    answerId: string;\r\n    rowVersion: string;\r\n    votes: number;\r\n    global: IAnswerGlobalMeta;\r\n}\r\n\r\nexport class AnswerMeta extends Model<IAnswerMeta> {\r\n\r\n    public async voteUp() {\r\n        await this.update(async () => {\r\n            const controller = new AnswersController();\r\n            await controller.updateMetadata({\r\n                ...this.state,\r\n                votes: 1,\r\n            });\r\n            return await controller.getMetadata(this.state.answerId);\r\n        });\r\n    }\r\n\r\n    public async voteNeutral() {\r\n        await this.update(async () => {\r\n            const controller = new AnswersController();\r\n            await controller.updateMetadata({\r\n                ...this.state,\r\n                votes: 0,\r\n            });\r\n            return await controller.getMetadata(this.state.answerId);\r\n        });\r\n    }\r\n\r\n    public async voteDown() {\r\n        await this.update(async () => {\r\n            const controller = new AnswersController();\r\n            await controller.updateMetadata({\r\n                ...this.state,\r\n                votes: -1,\r\n            });\r\n            return await controller.getMetadata(this.state.answerId);\r\n        });\r\n    }\r\n\r\n    protected blank(): IAnswerMeta {\r\n        return {\r\n            answerId: \"\",\r\n            answerMetaId: \"\",\r\n            global: {\r\n                votes: 0,\r\n            },\r\n            rowVersion: \"\",\r\n            votes: 0,\r\n        };\r\n    }\r\n\r\n    protected rebind(): void {\r\n        // No child objects\r\n    }\r\n}\r\n","interface ICacheEntry {\r\n    value: any;\r\n    expires: number;\r\n}\r\n\r\nexport default class MemoryCache {\r\n    private static isExpired(entry: ICacheEntry) {\r\n        return entry.expires < Date.now();\r\n    }\r\n\r\n    private pending: Promise<void> | null = null;\r\n\r\n    private readonly requests: { [key: string]: ICacheEntry } = {};\r\n\r\n    public get<T>(requestKey: string): T | null {\r\n        const entry = this.requests[requestKey];\r\n        if (!entry) {\r\n            return null;\r\n        }\r\n\r\n        if (MemoryCache.isExpired(entry)) {\r\n            delete this.requests[requestKey];\r\n            return null;\r\n        }\r\n\r\n        return entry.value as T;\r\n    }\r\n\r\n    public set(requestKey: string, result: any, expiresIn: number) {\r\n        this.requests[requestKey] = {\r\n            expires: Date.now() + expiresIn,\r\n            value: result,\r\n        };\r\n    }\r\n\r\n    public async waitPending(): Promise<void> {\r\n        if (this.pending) {\r\n            await this.pending;\r\n        }\r\n    }\r\n\r\n    public async update<T>(action: () => Promise<T>): Promise<T> {\r\n        let result: T | null = null;\r\n\r\n        this.pending = new Promise(async (resolve, reject) => {\r\n            try {\r\n                result = await action();\r\n                resolve();\r\n            } catch (error) {\r\n                reject(error);\r\n            }\r\n        });\r\n        await this.pending;\r\n\r\n        if (result == null) {\r\n            throw new Error(\"No data returned from cache update query\");\r\n        }\r\n\r\n        return result;\r\n    }\r\n}\r\n","import {BaseController} from \"../infrastructure/baseController\";\r\nimport MemoryCache from \"../infrastructure/caching/memoryCache\";\r\n\r\nconst userQueryCache = new MemoryCache();\r\n\r\nexport interface IUserData {\r\n    token: string;\r\n    authenticated: boolean;\r\n    claims: string[];\r\n}\r\n\r\nexport class UserController extends BaseController {\r\n    public async get(userId: string): Promise<IUserData> {\r\n        const requestKey = `/api/users/get::${userId}`;\r\n\r\n        // Wait for any pending ops\r\n        await userQueryCache.waitPending();\r\n\r\n        // Check for resolved items\r\n        const cachedResponse = userQueryCache.get<IUserData>(requestKey);\r\n        if (cachedResponse) {\r\n            return cachedResponse;\r\n        }\r\n\r\n        // Nope, do the full thing and cache the result\r\n        return await userQueryCache.update(async () => {\r\n            const result = await this.post<IUserData>(\"/api/users/get\", {id: userId});\r\n            userQueryCache.set(requestKey, result, 2000);\r\n            return result;\r\n        });\r\n    }\r\n}\r\n","import {Model} from \"../../../react-stateful/src/model\";\r\nimport {UserController} from \"../controllers/usersController\";\r\n\r\nexport interface IUserView {\r\n    userId: string;\r\n    username: string;\r\n}\r\n\r\nexport class UserView extends Model<IUserView> {\r\n    /** Fetch a user from the user id */\r\n    public static async get(userId: string): Promise<UserView> {\r\n        const user = new UserView();\r\n        user.state.userId = userId;\r\n        await user.refresh();\r\n        return user;\r\n    }\r\n\r\n    /** Reset to the default state */\r\n    public async reset(): Promise<void> {\r\n        await this.update(async () => {\r\n            return this.blank();\r\n        });\r\n    }\r\n\r\n    /** Fetch from the database */\r\n    public async refresh(): Promise<void> {\r\n        await this.update(async () => {\r\n            const controller = new UserController();\r\n            const userData = await controller.get(this.state.userId);\r\n            return userData;\r\n        });\r\n    }\r\n\r\n    protected blank(): IUserView {\r\n        return {\r\n            userId: \"\",\r\n            username: \"\",\r\n        };\r\n    }\r\n\r\n    protected rebind(): void {\r\n        // No bindings\r\n    }\r\n}\r\n","import {Model} from \"../../../react-stateful/src/model\";\r\nimport {AnswersController} from \"../controllers/answersController\";\r\nimport {AnswerMeta} from \"./answerMeta\";\r\nimport {IQueryResult, QuerySet} from \"./querySet\";\r\nimport {UserView} from \"./userView\";\r\n\r\nexport interface IAnswer {\r\n    answerId: string;\r\n    canEdit: boolean;\r\n    questionId: string;\r\n    body: string;\r\n    meta: AnswerMeta;\r\n    rowVersion: string;\r\n    userId: string;\r\n    user: UserView;\r\n}\r\n\r\nexport class Answer extends Model<IAnswer> {\r\n    /** Return a answer instance */\r\n    public static async get(answerId: string): Promise<Answer> {\r\n        const answer = new Answer();\r\n        answer.state.answerId = answerId;\r\n        await answer.refresh();\r\n        return answer;\r\n    }\r\n\r\n    /** Search for answers */\r\n    public static search(questionId: string, pageSize: number = 10, page: number = 0): Promise<QuerySet<Answer>> {\r\n        return QuerySet.fromQuery({\r\n            fetchIds: Answer.searchForIds,\r\n            fetchInstance: Answer.get,\r\n            pageSize,\r\n            query: questionId,\r\n        }, page);\r\n    }\r\n\r\n    private static async searchForIds(questionId: string, offset: number, limit: number): Promise<IQueryResult> {\r\n        const controller = new AnswersController();\r\n        return await controller.search(questionId, offset, limit);\r\n    }\r\n\r\n    /** Refresh a answer instance */\r\n    public async refresh(): Promise<void> {\r\n        await this.update(async () => await this.fetchAnswerData(this.state.answerId));\r\n    }\r\n\r\n    /** Reset to the default state */\r\n    public async reset(): Promise<void> {\r\n        await this.update(async () => {\r\n            return this.blank();\r\n        });\r\n    }\r\n\r\n    /** Save a answer */\r\n    public async save(): Promise<void> {\r\n        const controller = new AnswersController();\r\n        await this.update(async () => {\r\n            const simpleState = {\r\n                ...this.state,\r\n            };\r\n            delete simpleState.meta;\r\n            delete simpleState.user;\r\n            if (!this.state.answerId) {\r\n                const identity = await controller.add(simpleState);\r\n                return await this.fetchAnswerData(identity.answerId);\r\n            }\r\n            await controller.update(simpleState);\r\n            return await this.fetchAnswerData(this.state.answerId);\r\n        });\r\n    }\r\n\r\n    /** Delete this answer, if you're allowed to */\r\n    public async delete(): Promise<void> {\r\n        await this.update(async () => {\r\n            const controller = new AnswersController();\r\n            await controller.delete(this.state.answerId);\r\n            return this.blank();\r\n        });\r\n    }\r\n\r\n    protected blank(): IAnswer {\r\n        return {\r\n            answerId: \"\",\r\n            body: \"...\",\r\n            canEdit: false,\r\n            meta: new AnswerMeta(),\r\n            questionId: \"\",\r\n            rowVersion: \"\",\r\n            user: new UserView(),\r\n            userId: \"\",\r\n        };\r\n    }\r\n\r\n    protected async fetchAnswerData(answerId: string): Promise<IAnswer> {\r\n        const controller = new AnswersController();\r\n        const answerData = await controller.get(answerId);\r\n        const meta = new AnswerMeta(await controller.getMetadata(answerId));\r\n        const user = await UserView.get(answerData.userId);\r\n        return {\r\n            ...answerData,\r\n            meta,\r\n            user,\r\n        };\r\n    }\r\n\r\n    protected rebind(): void {\r\n        this.state.meta.parent = this;\r\n    }\r\n\r\n}\r\n","import {IQueryResult} from \"../domain/querySet\";\r\nimport {IQuestionMeta} from \"../domain/questionMeta\";\r\nimport {BaseController} from \"../infrastructure/baseController\";\r\n\r\ninterface IQuestionId {\r\n    questionId: string;\r\n}\r\n\r\nexport interface IQuestionData {\r\n    canEdit: boolean;\r\n    questionId: string;\r\n    topic: string;\r\n    title: string;\r\n    body: string;\r\n    tags: string[];\r\n    userId: string;\r\n    rowVersion: string;\r\n}\r\n\r\nexport interface IQuestionSummaryData {\r\n    answer: string | null;\r\n    canEdit: boolean;\r\n    questionId: string;\r\n    topic: string;\r\n    title: string;\r\n    userId: string;\r\n    summary: string;\r\n    tags: string[];\r\n}\r\n\r\nexport class QuestionsController extends BaseController {\r\n    public async add(question: IQuestionData): Promise<IQuestionId> {\r\n        return await this.post<IQuestionId>(\"/api/questions/add\", question);\r\n    }\r\n\r\n    public async delete(questionId: string): Promise<void> {\r\n        return await this.post<void>(\"/api/questions/delete\", {id: questionId});\r\n    }\r\n\r\n    public async get(questionId: string): Promise<IQuestionData> {\r\n        return await this.post<IQuestionData>(\"/api/questions/get\", {id: questionId});\r\n    }\r\n\r\n    public async getMetadata(questionId: string) {\r\n        return await this.post<IQuestionMeta>(\"/api/questions/metadata\", {id: questionId});\r\n    }\r\n\r\n    public async getSummary(questionId: string): Promise<IQuestionSummaryData> {\r\n        return await this.post<IQuestionSummaryData>(\"/api/questions/getSummary\", {id: questionId});\r\n    }\r\n\r\n    public async updateMetadata(metadata: IQuestionMeta) {\r\n        return await this.post<void>(\"/api/questions/updateMetadata\", metadata);\r\n    }\r\n\r\n    public async update(question: IQuestionData): Promise<IQuestionId> {\r\n        return await this.post<IQuestionId>(\"/api/questions/update\", question);\r\n    }\r\n\r\n    public async search(query: string, offset: number, limit: number): Promise<IQueryResult> {\r\n        return await this.post<IQueryResult>(\"/api/questions/search\", {\r\n            limit,\r\n            offset,\r\n            query,\r\n        });\r\n    }\r\n}\r\n","import {Model} from \"../../../react-stateful/src/model\";\r\nimport {QuestionsController} from \"../controllers/questionsController\";\r\n\r\nexport interface IQuestionGlobalMeta {\r\n    votes: number;\r\n}\r\n\r\nexport interface IQuestionMeta {\r\n    questionMetaId: string;\r\n    questionId: string;\r\n    rowVersion: string;\r\n    star: boolean;\r\n    votes: number;\r\n    global: IQuestionGlobalMeta;\r\n}\r\n\r\nexport class QuestionMeta extends Model<IQuestionMeta> {\r\n\r\n    public async voteUp() {\r\n        await this.update(async () => {\r\n            const controller = new QuestionsController();\r\n            await controller.updateMetadata({\r\n                ...this.state,\r\n                votes: 1,\r\n            });\r\n            return await controller.getMetadata(this.state.questionId);\r\n        });\r\n    }\r\n\r\n    public async voteNeutral() {\r\n        await this.update(async () => {\r\n            const controller = new QuestionsController();\r\n            await controller.updateMetadata({\r\n                ...this.state,\r\n                votes: 0,\r\n            });\r\n            return await controller.getMetadata(this.state.questionId);\r\n        });\r\n    }\r\n\r\n    public async voteDown() {\r\n        await this.update(async () => {\r\n            const controller = new QuestionsController();\r\n            await controller.updateMetadata({\r\n                ...this.state,\r\n                votes: -1,\r\n            });\r\n            return await controller.getMetadata(this.state.questionId);\r\n        });\r\n    }\r\n\r\n    public async addStar() {\r\n        await this.update(async () => {\r\n            const controller = new QuestionsController();\r\n            await controller.updateMetadata({\r\n                ...this.state,\r\n                star: true,\r\n            });\r\n            return await controller.getMetadata(this.state.questionId);\r\n        });\r\n    }\r\n\r\n    public async removeStar() {\r\n        await this.update(async () => {\r\n            const controller = new QuestionsController();\r\n            await controller.updateMetadata({\r\n                ...this.state,\r\n                star: false,\r\n            });\r\n            return await controller.getMetadata(this.state.questionId);\r\n        });\r\n    }\r\n\r\n    protected blank(): IQuestionMeta {\r\n        return {\r\n            global: {\r\n                votes: 0,\r\n            },\r\n            questionId: \"\",\r\n            questionMetaId: \"\",\r\n            rowVersion: \"\",\r\n            star: false,\r\n            votes: 0,\r\n        };\r\n    }\r\n\r\n    protected rebind(): void {\r\n        // No child objects\r\n    }\r\n}\r\n","import {Model} from \"../../../react-stateful/src/model\";\r\nimport {QuestionsController} from \"../controllers/questionsController\";\r\nimport {IQueryResult, QuerySet} from \"./querySet\";\r\nimport {QuestionMeta} from \"./questionMeta\";\r\nimport {UserView} from \"./userView\";\r\n\r\nexport interface IQuestion {\r\n    questionId: string;\r\n    topic: string;\r\n    title: string;\r\n    body: string;\r\n    tags: string[];\r\n    userId: string;\r\n    meta: QuestionMeta;\r\n    user: UserView;\r\n    canEdit: boolean;\r\n    rowVersion: string;\r\n}\r\n\r\nexport class Question extends Model<IQuestion> {\r\n    /** Return a answer instance */\r\n    public static async get(questionId: string): Promise<Question> {\r\n        const question = new Question();\r\n        question.state.questionId = questionId;\r\n        await question.refresh();\r\n        return question;\r\n    }\r\n\r\n    /** Search for topics */\r\n    public static search(query: string, pageSize: number = 10, page: number = 0): Promise<QuerySet<Question>> {\r\n        return QuerySet.fromQuery({\r\n            fetchIds: Question.searchForIds,\r\n            fetchInstance: Question.get,\r\n            pageSize,\r\n            query,\r\n        }, page);\r\n    }\r\n\r\n    private static async searchForIds(query: string, offset: number, limit: number): Promise<IQueryResult> {\r\n        const controller = new QuestionsController();\r\n        return await controller.search(query, offset, limit);\r\n    }\r\n\r\n    /** Delete this answer and all it's answers and data */\r\n    public async delete(): Promise<void> {\r\n        const controller = new QuestionsController();\r\n        await this.update(async () => {\r\n            await controller.delete(this.state.questionId);\r\n            return {\r\n                questionId: \"\",\r\n                rowVersion: \"\",\r\n            };\r\n        });\r\n    }\r\n\r\n    /** Refresh a answer instance */\r\n    public async refresh(): Promise<void> {\r\n        await this.update(async () => await this.fetchQuestionData(this.state.questionId));\r\n    }\r\n\r\n    /** Reset to the default state */\r\n    public async reset(): Promise<void> {\r\n        await this.update(async () => {\r\n            return this.blank();\r\n        });\r\n    }\r\n\r\n    /** Save a answer */\r\n    public async save(): Promise<void> {\r\n        const controller = new QuestionsController();\r\n        await this.update(async () => {\r\n            const simpleState = {\r\n                ...this.state,\r\n            };\r\n            delete simpleState.meta;\r\n            delete simpleState.user;\r\n            if (!this.state.questionId) {\r\n                const identity = await controller.add(simpleState);\r\n                return await this.fetchQuestionData(identity.questionId);\r\n            }\r\n            await controller.update(simpleState);\r\n            return await this.fetchQuestionData(this.state.questionId);\r\n        });\r\n    }\r\n\r\n    protected blank(): IQuestion {\r\n        return {\r\n            body: \"...\",\r\n            canEdit: false,\r\n            meta: new QuestionMeta(),\r\n            questionId: \"\",\r\n            rowVersion: \"\",\r\n            tags: [],\r\n            title: \"new question\",\r\n            topic: \"default\",\r\n            user: new UserView(),\r\n            userId: \"\",\r\n        };\r\n    }\r\n\r\n    protected async fetchQuestionData(questionId: string): Promise<IQuestion> {\r\n        const controller = new QuestionsController();\r\n        const questionData = await controller.get(questionId);\r\n        const meta = new QuestionMeta(await controller.getMetadata(questionId));\r\n        const user = await UserView.get(questionData.userId);\r\n        return {\r\n            ...questionData,\r\n            meta,\r\n            user,\r\n        };\r\n    }\r\n\r\n    protected rebind(): void {\r\n        this.state.meta.parent = this;\r\n    }\r\n}\r\n","import { LoggerProvider } from \"../../../../react-pangul-core/src/providers/loggerProvider\";\r\nimport { Model } from \"../../../../react-stateful/src/model\";\r\n\r\nexport abstract class Page<TInitialStateProps, TPageState> extends Model<TPageState> {\r\n    protected isLoaded: boolean = false;\r\n    protected unsubscribe: () => void;\r\n\r\n    public constructor(forceUpdate: () => void) {\r\n        super();\r\n        this.unsubscribe = this.subscribe(() => {\r\n            forceUpdate();\r\n        });\r\n    }\r\n\r\n    public load(props: TInitialStateProps) {\r\n        this.isLoaded = true;\r\n        this.runAsync(async () => await this.loadInitialData(props));\r\n    }\r\n\r\n    public unload(): void {\r\n        if (this.isLoaded) {\r\n            this.isLoaded = false;\r\n            this.unsubscribe();\r\n        }\r\n    }\r\n\r\n    protected abstract loadInitialData(props: TInitialStateProps): Promise<void>;\r\n\r\n    protected runAsync(task: () => Promise<void>) {\r\n        setTimeout(() => {\r\n            task().then(() => {\r\n                // Success, do nothing\r\n            }, (err) => {\r\n                LoggerProvider.get().error(err);\r\n            });\r\n        }, 1);\r\n    }\r\n}\r\n","import {Answer} from \"../../../../../react-pangul-core/src/domain/answer\";\r\nimport {Question} from \"../../../../../react-pangul-core/src/domain/question\";\r\nimport {Topic} from \"../../../../../react-pangul-core/src/domain/topic\";\r\nimport {UserContext} from \"../../../../../react-pangul-core/src/domain/userContext\";\r\nimport {Page} from \"../../../infrastructure/componentHelpers/page\";\r\n\r\nexport interface ITopicAnswerQuestionProps {\r\n    topic: string;\r\n    question: string;\r\n    user: UserContext;\r\n}\r\n\r\ninterface ITopicAnswerQuestion {\r\n    topic: Topic;\r\n    question: Question;\r\n    answer: Answer;\r\n    notice: string | null;\r\n}\r\n\r\nexport class TopicAnswerQuestion extends Page<ITopicAnswerQuestionProps, ITopicAnswerQuestion> {\r\n    public async answerQuestion() {\r\n        await this.update(async () => {\r\n            return Promise.resolve({notice: null});\r\n        });\r\n        await this.state.answer.update(async () => {\r\n            return {\r\n                questionId: this.state.question.state.questionId,\r\n            };\r\n        });\r\n        await this.state.answer.save();\r\n        if (this.state.answer.error === null) {\r\n            await this.update(async () => {\r\n                return Promise.resolve({notice: \"Saved answer\"});\r\n            });\r\n        }\r\n    }\r\n\r\n    protected async loadInitialData(fromProps: ITopicAnswerQuestionProps): Promise<void> {\r\n        await this.update(async () => {\r\n            const topic = await Topic.get(fromProps.topic);\r\n            if (topic.error) {\r\n                throw topic.error;\r\n            }\r\n\r\n            const question = await Question.get(fromProps.question);\r\n            if (question.error) {\r\n                throw question.error;\r\n            }\r\n\r\n            return {question, topic, answer: new Answer()};\r\n        });\r\n    }\r\n\r\n    protected blank(): ITopicAnswerQuestion {\r\n        return {\r\n            answer: new Answer(),\r\n            notice: null,\r\n            question: new Question(),\r\n            topic: new Topic(),\r\n        };\r\n    }\r\n\r\n    protected rebind(): void {\r\n        this.state.topic.parent = this;\r\n        this.state.question.parent = this;\r\n        this.state.answer.parent = this;\r\n    }\r\n}\r\n","import * as React from \"react\";\r\nimport {AnswerForm} from \"../../../components/answer/answerForm/answerForm\";\r\nimport {InfoNotice} from \"../../../components/common/display/infoNotice/infoNotice\";\r\nimport {LayoutContentContainer} from \"../../../components/layout/layoutContentContainer/layoutContentContainer\";\r\nimport {LayoutFormContainer} from \"../../../components/layout/layoutFormContainer/layoutFormContainer\";\r\nimport {LayoutRightBox} from \"../../../components/layout/layoutRightBox/layoutRightBox\";\r\nimport {LayoutStandardHeader} from \"../../../components/layout/layoutStandardHeader/layoutStandardHeader\";\r\nimport {QuestionLink, QuestionLinkType} from \"../../../components/question/questionLink/questionLink\";\r\nimport {QuestionView} from \"../../../components/question/questionView/questionView\";\r\nimport {ITopicAnswerQuestionProps, TopicAnswerQuestion} from \"./topicAnswerQuestion\";\r\n\r\nexport class TopicAnswerQuestionPage extends React.Component<ITopicAnswerQuestionProps> {\r\n    private data: TopicAnswerQuestion;\r\n\r\n    constructor(props: ITopicAnswerQuestionProps) {\r\n        super(props);\r\n        this.data = new TopicAnswerQuestion(() => this.forceUpdate());\r\n\r\n    }\r\n\r\n    public componentDidMount() {\r\n        this.data.unload();\r\n        this.data = new TopicAnswerQuestion(() => this.forceUpdate());\r\n        this.data.load(this.props);\r\n    }\r\n\r\n    public componentWillUnmount() {\r\n        this.data.unload();\r\n    }\r\n\r\n    public render() {\r\n        if (!this.guardInvalidState()) {\r\n            return \"\";\r\n        }\r\n\r\n        const question = this.data.state.question;\r\n        const answer = this.data.state.answer;\r\n        const topic = this.data.state.topic;\r\n\r\n        return (\r\n            <div className={\"component--TopicHomePage\"}>\r\n                <LayoutStandardHeader user={this.props.user.state}\r\n                                      topic={topic.state}\r\n                                      loading={this.data.updating}/>\r\n                <LayoutContentContainer>\r\n                    <LayoutRightBox expand={false}>\r\n                        <QuestionLink question={question} target={QuestionLinkType.View}>\r\n                            View full question\r\n                        </QuestionLink>\r\n                    </LayoutRightBox>\r\n                    <QuestionView question={question}/>\r\n                </LayoutContentContainer>\r\n\r\n                <LayoutFormContainer error={this.data.state.question.error}>\r\n                    <InfoNotice value={this.data.state.notice}/>\r\n                    <AnswerForm submit={this.answerQuestionEvent}\r\n                                answer={answer}\r\n                                saveText=\"Save\"/>\r\n                </LayoutFormContainer>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    public guardInvalidState(): boolean {\r\n        return this.data !== null;\r\n    }\r\n\r\n    private answerQuestionEvent = () => this.data.answerQuestion();\r\n}\r\n","import * as React from \"react\";\r\nimport \"./layoutUnsafeBox.css\";\r\n\r\nexport interface ILayoutUnsafeBox {\r\n    title: string;\r\n}\r\n\r\nexport interface ILayoutUnsafeBoxState {\r\n    open: boolean;\r\n}\r\n\r\nexport class LayoutUnsafeBox extends React.Component<ILayoutUnsafeBox, ILayoutUnsafeBoxState> {\r\n    public constructor(props: ILayoutUnsafeBox) {\r\n        super(props);\r\n        this.state = {\r\n            open: false,\r\n        };\r\n    }\r\n\r\n    public render() {\r\n        if (this.state.open) {\r\n            return (\r\n                <div className=\"component--LayoutUnsafeBox\">\r\n                    <div className=\"header\" onClick={this.toggleOpenState}>\r\n                        {this.props.title}\r\n                    </div>\r\n                    {this.props.children}\r\n                </div>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <div className=\"component--LayoutUnsafeBox\">\r\n                <div className=\"header\" onClick={this.toggleOpenState}>\r\n                    {this.props.title}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private toggleOpenState = () => {\r\n        this.setState({open: !this.state.open});\r\n    }\r\n}\r\n","import * as React from \"react\";\r\nimport {UserContext} from \"../../../../../react-pangul-core/src/domain/userContext\";\r\nimport AuthService from \"../../../../../react-pangul-core/src/services/authService\";\r\n\r\nexport interface ILayoutWithPermissions {\r\n    user: UserContext;\r\n    requirePermissions: string[];\r\n}\r\n\r\nexport class LayoutWithPermissions extends React.Component<ILayoutWithPermissions> {\r\n    private auth = new AuthService();\r\n\r\n    public render() {\r\n        return (\r\n            <React.Fragment>\r\n                {this.authorized() ? this.props.children : <React.Fragment/>}\r\n            </React.Fragment>\r\n        );\r\n    }\r\n\r\n    private authorized(): boolean {\r\n        return this.auth.hasPermissions(this.props.user, this.props.requirePermissions);\r\n    }\r\n}\r\n","import * as React from \"react\";\r\nimport {UserContext} from \"../../../../../react-pangul-core/src/domain/userContext\";\r\nimport {LayoutContentContainer} from \"../layoutContentContainer/layoutContentContainer\";\r\nimport {LayoutUnsafeBox} from \"../layoutUnsafeBox/layoutUnsafeBox\";\r\nimport {LayoutWithPermissions} from \"../layoutWithPermissions/layoutWithPermissions\";\r\n\r\nexport interface ILayoutStandardUnsafe {\r\n    user: UserContext;\r\n    permissions: string[];\r\n}\r\n\r\nexport class LayoutStandardUnsafe extends React.Component<ILayoutStandardUnsafe> {\r\n    public render() {\r\n        return (\r\n            <LayoutWithPermissions user={this.props.user} requirePermissions={this.props.permissions}>\r\n                <LayoutContentContainer>\r\n                    <LayoutUnsafeBox title=\"Unsafe commands\">\r\n                        <form>\r\n                            <fieldset>\r\n                                {this.props.children}\r\n                            </fieldset>\r\n                        </form>\r\n                    </LayoutUnsafeBox>\r\n                </LayoutContentContainer>\r\n            </LayoutWithPermissions>\r\n        );\r\n    }\r\n}\r\n","import {Answer} from \"../../../../../react-pangul-core/src/domain/answer\";\r\nimport {Question} from \"../../../../../react-pangul-core/src/domain/question\";\r\nimport {Topic} from \"../../../../../react-pangul-core/src/domain/topic\";\r\nimport {UserContext} from \"../../../../../react-pangul-core/src/domain/userContext\";\r\nimport {Page} from \"../../../infrastructure/componentHelpers/page\";\r\nimport NavigationService from \"../../../infrastructure/service/navigationService\";\r\n\r\nexport interface ITopicEditAnswerProps {\r\n    topic: string;\r\n    question: string;\r\n    answer: string;\r\n    user: UserContext;\r\n}\r\n\r\ninterface ITopicEditAnswer {\r\n    topic: Topic;\r\n    question: Question;\r\n    answer: Answer;\r\n    notice: string | null;\r\n}\r\n\r\nexport class TopicEditAnswer extends Page<ITopicEditAnswerProps, ITopicEditAnswer> {\r\n    public async saveAnswer(): Promise<void> {\r\n        await this.update(async () => {\r\n            return Promise.resolve({notice: null});\r\n        });\r\n        await this.state.answer.save();\r\n        if (this.state.answer.error === null) {\r\n            await this.update(async () => {\r\n                return Promise.resolve({notice: \"Saved answer\"});\r\n            });\r\n        }\r\n    }\r\n\r\n    public async deleteAnswer() {\r\n        await this.state.answer.delete();\r\n        const nav = new NavigationService();\r\n        const question = this.state.question;\r\n        nav.redirect(nav.urlForQuestion(question.state.topic, question.state.questionId));\r\n    }\r\n\r\n    protected async loadInitialData(fromProps: ITopicEditAnswerProps): Promise<void> {\r\n        await this.update(async () => {\r\n            const topic = await Topic.get(fromProps.topic);\r\n            if (topic.error) {\r\n                throw topic.error;\r\n            }\r\n\r\n            const question = await Question.get(fromProps.question);\r\n            if (question.error) {\r\n                throw question.error;\r\n            }\r\n\r\n            const answer = await Answer.get(fromProps.answer);\r\n            if (answer.error) {\r\n                throw answer.error;\r\n            }\r\n\r\n            if (answer.state.questionId !== question.state.questionId) {\r\n                throw new Error(\"Invalid answer id for topic\");\r\n            }\r\n\r\n            return {question, topic, answer};\r\n        });\r\n    }\r\n\r\n    protected blank(): ITopicEditAnswer {\r\n        return {\r\n            answer: new Answer(),\r\n            notice: null,\r\n            question: new Question(),\r\n            topic: new Topic(),\r\n        };\r\n    }\r\n\r\n    protected rebind(): void {\r\n        this.state.topic.parent = this;\r\n        this.state.question.parent = this;\r\n        this.state.answer.parent = this;\r\n    }\r\n}\r\n","import * as React from \"react\";\r\nimport {AnswerForm} from \"../../../components/answer/answerForm/answerForm\";\r\nimport {InfoNotice} from \"../../../components/common/display/infoNotice/infoNotice\";\r\nimport {LayoutContentContainer} from \"../../../components/layout/layoutContentContainer/layoutContentContainer\";\r\nimport {LayoutFormContainer} from \"../../../components/layout/layoutFormContainer/layoutFormContainer\";\r\nimport {LayoutRightBox} from \"../../../components/layout/layoutRightBox/layoutRightBox\";\r\nimport {LayoutStandardHeader} from \"../../../components/layout/layoutStandardHeader/layoutStandardHeader\";\r\nimport {LayoutStandardUnsafe} from \"../../../components/layout/layoutStandardUnsafe/layoutStandardUnsafe\";\r\nimport {QuestionLink, QuestionLinkType} from \"../../../components/question/questionLink/questionLink\";\r\nimport {QuestionView} from \"../../../components/question/questionView/questionView\";\r\nimport {ITopicEditAnswerProps, TopicEditAnswer} from \"./topicEditAnswer\";\r\n\r\nexport class TopicEditAnswerPage extends React.Component<ITopicEditAnswerProps> {\r\n    private data: TopicEditAnswer;\r\n\r\n    constructor(props: ITopicEditAnswerProps) {\r\n        super(props);\r\n        this.data = new TopicEditAnswer(() => this.forceUpdate());\r\n    }\r\n\r\n    public componentDidMount() {\r\n        this.data.unload();\r\n        this.data = new TopicEditAnswer(() => this.forceUpdate());\r\n        this.data.load(this.props);\r\n    }\r\n\r\n    public componentWillUnmount() {\r\n        this.data.unload();\r\n    }\r\n\r\n    public render() {\r\n        if (!this.guardInvalidState()) {\r\n            return \"\";\r\n        }\r\n\r\n        const question = this.data.state.question;\r\n        const answer = this.data.state.answer;\r\n        const topic = this.data.state.topic;\r\n\r\n        return (\r\n            <div className={\"component--TopicHomePage\"}>\r\n                <LayoutStandardHeader user={this.props.user.state}\r\n                                      topic={topic.state}\r\n                                      loading={this.data.updating}/>\r\n                <LayoutContentContainer>\r\n                    <QuestionView question={question}/>\r\n                </LayoutContentContainer>\r\n\r\n                <LayoutFormContainer error={this.data.state.answer.error}>\r\n                    <LayoutRightBox expand={true}>\r\n                        <QuestionLink question={question} target={QuestionLinkType.View}>Close</QuestionLink>\r\n                    </LayoutRightBox>\r\n                    <InfoNotice value={this.data.state.notice}/>\r\n                    <AnswerForm submit={this.saveAnswerEvent} answer={answer} saveText=\"Save\"/>\r\n                </LayoutFormContainer>\r\n\r\n                <LayoutStandardUnsafe user={this.props.user} permissions={[\"CanDelete:Answer\"]}>\r\n                    <LayoutRightBox expand={true}>\r\n                        <p>\r\n                            Delete this answer?\r\n                        </p>\r\n                        <p>\r\n                            Careful! No undo for this!\r\n                        </p>\r\n                        <button onClick={this.onDeleteQuestion}>Delete answer</button>\r\n                    </LayoutRightBox>\r\n                </LayoutStandardUnsafe>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    public guardInvalidState(): boolean {\r\n        return this.data !== null;\r\n    }\r\n\r\n    private readonly saveAnswerEvent = () => this.data.saveAnswer();\r\n\r\n    private onDeleteQuestion = async (e: React.FormEvent) => {\r\n        e.preventDefault();\r\n        await this.data.deleteAnswer();\r\n    }\r\n}\r\n","import * as React from \"react\";\r\nimport { LayoutContentContainer } from \"../../../components/layout/layoutContentContainer/layoutContentContainer\";\r\nimport { LayoutFooter } from \"../../../components/layout/layoutFooter/layoutFooter\";\r\nimport NavigationService from \"../../../infrastructure/service/navigationService\";\r\nimport \"./genericHelpPage.css\";\r\n\r\nconst HelpTip = (props: any) => {\r\n    return (\r\n        <div className=\"tip\">\r\n            {props.children}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport class GenericHelpPage extends React.Component {\r\n    public render() {\r\n        const nav = new NavigationService();\r\n        return (\r\n            <div className={\"component--TopicHomePage\"}>\r\n                <LayoutContentContainer>\r\n                    <h1>Help</h1>\r\n\r\n                    <HelpTip>\r\n                        To start a new topic, just go to {nav.urlForTopic(\"NAME\")}\r\n                    </HelpTip>\r\n\r\n                    <HelpTip>\r\n                        Searching for tags:\r\n                        <code>\r\n                            tag:name tag:name2 some search\r\n                        </code>\r\n                    </HelpTip>\r\n\r\n                    <HelpTip>\r\n                        Searching for anything in a topic:\r\n                        <code>\r\n                            topic:name *\r\n                        </code>\r\n                    </HelpTip>\r\n\r\n                    <HelpTip>\r\n                        Searching in multiple topics:\r\n                        <code>\r\n                            topic:name topic:other query\r\n                        </code>\r\n                    </HelpTip>\r\n\r\n                    <HelpTip>\r\n                        Searching in any topic:\r\n                        <code>\r\n                            topic:* query\r\n                        </code>\r\n                    </HelpTip>\r\n                </LayoutContentContainer>\r\n                <LayoutFooter/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import * as React from \"react\";\r\nimport {Redirect} from \"react-router\";\r\nimport {UserContext} from \"../../../../../react-pangul-core/src/domain/userContext\";\r\nimport AuthService from \"../../../../../react-pangul-core/src/services/authService\";\r\nimport {LayoutContentContainer} from \"../../../components/layout/layoutContentContainer/layoutContentContainer\";\r\nimport {LayoutRightBox} from \"../../../components/layout/layoutRightBox/layoutRightBox\";\r\nimport {LayoutStandardHeader} from \"../../../components/layout/layoutStandardHeader/layoutStandardHeader\";\r\nimport NavigationService from \"../../../infrastructure/service/navigationService\";\r\nimport \"./genericLogoutPage.css\";\r\n\r\nexport interface IGenericLogoutPage {\r\n    user: UserContext;\r\n}\r\n\r\nexport interface IGenericLogoutPageState {\r\n    redirect: boolean;\r\n}\r\n\r\nexport class GenericLogoutPage extends React.Component<IGenericLogoutPage, IGenericLogoutPageState> {\r\n    constructor(props: IGenericLogoutPage) {\r\n        super(props);\r\n        this.state = {\r\n            redirect: false,\r\n        };\r\n    }\r\n\r\n    public render() {\r\n        if (this.state.redirect) {\r\n            return <Redirect to={new NavigationService().urlForRoot()}/>;\r\n        }\r\n        return (\r\n            <div className=\"component--GenericLogoutPage\">\r\n                <LayoutStandardHeader user={this.props.user.state}\r\n                                      topic={null}\r\n                                      loading={this.props.user.updating}/>\r\n                <LayoutContentContainer>\r\n                    <h3 className=\"notice\">\r\n                        Logout?\r\n                    </h3>\r\n                    <p>\r\n                        Are you sure? Your current session will be abandoned.\r\n                    </p>\r\n                </LayoutContentContainer>\r\n                <LayoutContentContainer>\r\n                    <LayoutRightBox expand={true}>\r\n                        <button onClick={this.onLogout}>Logout</button>\r\n                    </LayoutRightBox>\r\n                </LayoutContentContainer>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private onLogout = async () => {\r\n        const user = this.props.user;\r\n        this.setState({redirect: true}, async () => {\r\n            const authService = new AuthService();\r\n            await authService.logout(user);\r\n        });\r\n    }\r\n}\r\n","import * as React from \"react\";\r\n\r\nexport interface IInputEditor {\r\n    value: string;\r\n    onChange: (body: string) => void;\r\n}\r\n\r\nexport interface IInputEditorState {\r\n    value: string;\r\n    lastPropValue: string;\r\n}\r\n\r\nexport class InputEditor extends React.Component<IInputEditor, IInputEditorState> {\r\n    public static getDerivedStateFromProps(props: IInputEditor, state: IInputEditorState) {\r\n        if (props.value !== state.lastPropValue) {\r\n            return {value: props.value, lastPropValue: props.value};\r\n        }\r\n        return null;\r\n    }\r\n\r\n    private events: { [key: string]: any } = {};\r\n\r\n    constructor(props: IInputEditor) {\r\n        super(props);\r\n        this.state = {\r\n            lastPropValue: \"\",\r\n            value: \"\",\r\n        };\r\n        this.events = {\r\n            onChange: (e: React.FormEvent<HTMLTextAreaElement>) => this.onChange(e),\r\n        };\r\n    }\r\n\r\n    public render() {\r\n        return (\r\n            <input value={this.state.value} onChange={this.events.onChange}/>\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Prevent react from jumping the cursor as you type\r\n     */\r\n    private onChange(event: React.FormEvent<HTMLTextAreaElement>) {\r\n        const value = event.currentTarget.value;\r\n        this.setState({value}, () => {\r\n            this.props.onChange(value);\r\n        });\r\n    }\r\n}\r\n","import * as React from \"react\";\r\nimport {InputEditor} from \"../../common/editors/inputEditor/inputEditor\";\r\nimport {isSameArray} from \"../../common/utility/sameArray\";\r\nimport {TagList} from \"../tagList/tagList\";\r\nimport \"./tagPicker.css\";\r\n\r\nexport interface ITagPicker {\r\n    value: string[];\r\n    onChange: (tags: string[]) => void;\r\n}\r\n\r\nexport interface ITagPickerStart {\r\n    lastTags: string[];\r\n    tagEditValue: string;\r\n}\r\n\r\nexport class TagPicker extends React.Component<ITagPicker, ITagPickerStart> {\r\n    public static getDerivedStateFromProps(props: ITagPicker, state: ITagPickerStart) {\r\n        if (!isSameArray(props.value, state.lastTags)) {\r\n            return {tagEditValue: props.value.join(\", \"), lastTags: props.value};\r\n        }\r\n        return null;\r\n    }\r\n\r\n    private static onlyUnique(value: string, index: number, self: string[]) {\r\n        return self.indexOf(value) === index;\r\n    }\r\n\r\n    private onTagsChangedEvent: (value: string) => void;\r\n\r\n    constructor(props: ITagPicker) {\r\n        super(props);\r\n        this.state = {\r\n            lastTags: [],\r\n            tagEditValue: \"\",\r\n        };\r\n        this.onTagsChangedEvent = (value: string) => this.onTagsChanged(value);\r\n    }\r\n\r\n    public render() {\r\n        return (\r\n            <div className=\"component--TagPicker\">\r\n                <InputEditor value={this.state.tagEditValue} onChange={this.onTagsChangedEvent}/>\r\n                <div className=\"rendered\">\r\n                    <TagList tags={this.props.value} topic={null}/>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private onTagsChanged(value: string) {\r\n        this.setState({tagEditValue: value}, () => {\r\n            const tags = value\r\n                .split(\",\")\r\n                .map((i) => i.trim())\r\n                .filter((i) => i.length > 0)\r\n                .filter(TagPicker.onlyUnique);\r\n\r\n            this.props.onChange(tags);\r\n        });\r\n    }\r\n}\r\n","export function isSameArray<T>(a: T[], b: T[]): boolean {\r\n    if (a.length !== b.length) {\r\n        return false;\r\n    }\r\n    for (let index = 0; index < a.length; index += 1) {\r\n        if (a[index] !== b[index]) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}","import * as React from \"react\";\r\nimport {Question} from \"../../../../../react-pangul-core/src/domain/question\";\r\nimport {InputEditor} from \"../../common/editors/inputEditor/inputEditor\";\r\nimport {MarkdownEditor} from \"../../common/editors/markdownEditor/markdownEditor\";\r\nimport {LayoutIf} from \"../../layout/layoutIf/layoutIf\";\r\nimport {TagPicker} from \"../../tag/tagPicker/tagPicker\";\r\n\r\nexport interface IQuestionForm {\r\n    submit: () => void;\r\n    question: Question;\r\n    saveText: string;\r\n    showTopic: boolean;\r\n}\r\n\r\nexport class QuestionForm extends React.Component<IQuestionForm> {\r\n    private onSaveEvent: (e: React.FormEvent) => void;\r\n    private onTitleChangedEvent: (title: string) => void;\r\n    private onTagsChangedEvent: (tags: string[]) => void;\r\n    private onBodyChangedEvent: (body: string) => void;\r\n\r\n    public constructor(props: IQuestionForm) {\r\n        super(props);\r\n        this.onBodyChangedEvent = (body: string) => this.onBodyChanged(body);\r\n        this.onSaveEvent = (e: React.FormEvent) => this.onSave(e);\r\n        this.onTagsChangedEvent = (tags: string[]) => this.onTagsChanged(tags);\r\n        this.onTitleChangedEvent = (value: string) => this.onTitleChanged(value);\r\n    }\r\n\r\n    public render() {\r\n        return (\r\n            <div className=\"component--Question\">\r\n                <form action=\"\" onSubmit={this.onSaveEvent}>\r\n                    <LayoutIf show={this.props.showTopic}>\r\n                        <fieldset>\r\n                            <InputEditor value={this.props.question.state.topic} onChange={this.onTopicChanged}/>\r\n                        </fieldset>\r\n                    </LayoutIf>\r\n                    <fieldset>\r\n                        <InputEditor value={this.props.question.state.title} onChange={this.onTitleChangedEvent}/>\r\n                    </fieldset>\r\n                    <fieldset>\r\n                        <MarkdownEditor value={this.props.question.state.body} onChange={this.onBodyChangedEvent}/>\r\n                    </fieldset>\r\n                    <fieldset>\r\n                        <TagPicker value={this.props.question.state.tags} onChange={this.onTagsChangedEvent}/>\r\n                    </fieldset>\r\n                    <fieldset className=\"buttons\">\r\n                        <button className=\"submit\">{this.props.saveText}</button>\r\n                    </fieldset>\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private onTopicChanged = (topic: string) => {\r\n        this.props.question.update(async () => {\r\n            return {topic};\r\n        });\r\n    }\r\n\r\n    private onSave(e: React.FormEvent) {\r\n        e.preventDefault();\r\n        this.props.submit();\r\n    }\r\n\r\n    private onTitleChanged(title: string) {\r\n        this.props.question.update(async () => {\r\n            return {title};\r\n        });\r\n    }\r\n\r\n    private onTagsChanged(tags: string[]) {\r\n        this.props.question.update(async () => {\r\n            return {tags};\r\n        });\r\n    }\r\n\r\n    private onBodyChanged(body: string) {\r\n        this.props.question.update(async () => {\r\n            return {body};\r\n        });\r\n    }\r\n}\r\n","import {Question} from \"../../../../../react-pangul-core/src/domain/question\";\r\nimport {Topic} from \"../../../../../react-pangul-core/src/domain/topic\";\r\nimport {UserContext} from \"../../../../../react-pangul-core/src/domain/userContext\";\r\nimport {Page} from \"../../../infrastructure/componentHelpers/page\";\r\n\r\nexport interface ITopicAskQuestionProps {\r\n    topic: string;\r\n    user: UserContext;\r\n}\r\n\r\ninterface ITopicAskQuestion {\r\n    topic: Topic;\r\n    question: Question;\r\n    notice: string | null;\r\n}\r\n\r\nexport class TopicAskQuestion extends Page<ITopicAskQuestionProps, ITopicAskQuestion> {\r\n    public async askQuestion() {\r\n        await this.update(async () => {\r\n            return Promise.resolve({notice: null});\r\n        });\r\n        await this.state.question.save();\r\n        if (this.state.question.error === null) {\r\n            await this.update(async () => {\r\n                return Promise.resolve({notice: \"Saved question\"});\r\n            });\r\n        }\r\n    }\r\n\r\n    protected async loadInitialData(fromProps: ITopicAskQuestionProps): Promise<void> {\r\n        await this.update(async () => {\r\n            const topic = await Topic.get(fromProps.topic);\r\n            if (topic.error) {\r\n                throw topic.error;\r\n            }\r\n\r\n            const question = new Question();\r\n            await question.update(async () => {\r\n                return {topic: topic.state.name};\r\n            });\r\n\r\n            return {question, topic};\r\n        });\r\n    }\r\n\r\n    protected blank(): ITopicAskQuestion {\r\n        return {\r\n            notice: null,\r\n            question: new Question(),\r\n            topic: new Topic(),\r\n        };\r\n    }\r\n\r\n    protected rebind(): void {\r\n        this.state.topic.parent = this;\r\n        this.state.question.parent = this;\r\n    }\r\n}\r\n","import * as React from \"react\";\r\nimport {InfoNotice} from \"../../../components/common/display/infoNotice/infoNotice\";\r\nimport {LayoutFormContainer} from \"../../../components/layout/layoutFormContainer/layoutFormContainer\";\r\nimport {LayoutIf} from \"../../../components/layout/layoutIf/layoutIf\";\r\nimport {LayoutRightBox} from \"../../../components/layout/layoutRightBox/layoutRightBox\";\r\nimport {LayoutStandardHeader} from \"../../../components/layout/layoutStandardHeader/layoutStandardHeader\";\r\nimport {QuestionForm} from \"../../../components/question/questionForm/questionForm\";\r\nimport {QuestionLink, QuestionLinkType} from \"../../../components/question/questionLink/questionLink\";\r\nimport {ITopicAskQuestionProps, TopicAskQuestion} from \"./topicAskQuestion\";\r\n\r\nexport class TopicAskQuestionPage extends React.Component<ITopicAskQuestionProps> {\r\n    private data: TopicAskQuestion;\r\n\r\n    constructor(props: ITopicAskQuestionProps) {\r\n        super(props);\r\n        this.data = new TopicAskQuestion(() => this.forceUpdate());\r\n    }\r\n\r\n    public componentDidMount() {\r\n        this.data.unload();\r\n        this.data = new TopicAskQuestion(() => this.forceUpdate());\r\n        this.data.load(this.props);\r\n    }\r\n\r\n    public componentWillUnmount() {\r\n        this.data.unload();\r\n    }\r\n\r\n    public render() {\r\n        if (!this.guardInvalidState()) {\r\n            return \"\";\r\n        }\r\n\r\n        const question = this.data.state.question;\r\n        const topic = this.data.state.topic;\r\n\r\n        return (\r\n            <div className={\"component--TopicHomePage\"}>\r\n                <LayoutStandardHeader user={this.props.user.state}\r\n                                      topic={topic.state}\r\n                                      loading={this.data.updating}/>\r\n                <LayoutFormContainer error={this.data.state.question.error}>\r\n                    <LayoutIf show={question.state.questionId}>\r\n                        <LayoutRightBox expand={true}>\r\n                            <QuestionLink question={question} target={QuestionLinkType.View}>View</QuestionLink>\r\n                        </LayoutRightBox>\r\n                    </LayoutIf>\r\n                    <InfoNotice value={this.data.state.notice}/>\r\n                    <QuestionForm showTopic={false}\r\n                                  submit={this.askQuestion}\r\n                                  question={question}\r\n                                  saveText=\"Save\"/>\r\n                </LayoutFormContainer>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    public guardInvalidState(): boolean {\r\n        return this.data !== null;\r\n    }\r\n\r\n    private askQuestion = () => this.data.askQuestion();\r\n\r\n}\r\n","import {Question} from \"../../../../../react-pangul-core/src/domain/question\";\r\nimport {Topic} from \"../../../../../react-pangul-core/src/domain/topic\";\r\nimport {UserContext} from \"../../../../../react-pangul-core/src/domain/userContext\";\r\nimport {Page} from \"../../../infrastructure/componentHelpers/page\";\r\nimport NavigationService from \"../../../infrastructure/service/navigationService\";\r\n\r\nexport interface ITopicEditQuestionProps {\r\n    topic: string;\r\n    question: string;\r\n    user: UserContext;\r\n}\r\n\r\ninterface ITopicEditQuestion {\r\n    topic: Topic;\r\n    question: Question;\r\n    notice: string | null;\r\n}\r\n\r\nexport class TopicEditQuestion extends Page<ITopicEditQuestionProps, ITopicEditQuestion> {\r\n    public async updateQuestion() {\r\n        await this.update(async () => {\r\n            return Promise.resolve({notice: null});\r\n        });\r\n        await this.state.question.save();\r\n        if (this.state.question.error === null) {\r\n            await this.update(async () => {\r\n                return Promise.resolve({notice: \"Saved question\"});\r\n            });\r\n        }\r\n    }\r\n\r\n    public async deleteQuestion() {\r\n        await this.state.question.delete();\r\n        const nav = new NavigationService();\r\n        const postDeleteUrl = nav.urlForTopic(this.state.topic.state.name);\r\n        nav.redirect(postDeleteUrl);\r\n    }\r\n\r\n    protected async loadInitialData(fromProps: ITopicEditQuestionProps): Promise<void> {\r\n        await this.update(async () => {\r\n            const topic = await Topic.get(fromProps.topic);\r\n            if (topic.error) {\r\n                throw topic.error;\r\n            }\r\n\r\n            const question = await Question.get(fromProps.question);\r\n            if (question.error) {\r\n                throw question.error;\r\n            }\r\n\r\n            return {question, topic};\r\n        });\r\n    }\r\n\r\n    protected blank(): ITopicEditQuestion {\r\n        return {\r\n            notice: null,\r\n            question: new Question(),\r\n            topic: new Topic(),\r\n        };\r\n    }\r\n\r\n    protected rebind(): void {\r\n        this.state.topic.parent = this;\r\n        this.state.question.parent = this;\r\n    }\r\n}\r\n","import * as React from \"react\";\r\nimport {InfoNotice} from \"../../../components/common/display/infoNotice/infoNotice\";\r\nimport {LayoutFormContainer} from \"../../../components/layout/layoutFormContainer/layoutFormContainer\";\r\nimport {LayoutRightBox} from \"../../../components/layout/layoutRightBox/layoutRightBox\";\r\nimport {LayoutStandardHeader} from \"../../../components/layout/layoutStandardHeader/layoutStandardHeader\";\r\nimport {LayoutStandardUnsafe} from \"../../../components/layout/layoutStandardUnsafe/layoutStandardUnsafe\";\r\nimport {QuestionForm} from \"../../../components/question/questionForm/questionForm\";\r\nimport {QuestionLink, QuestionLinkType} from \"../../../components/question/questionLink/questionLink\";\r\nimport {ITopicEditQuestionProps, TopicEditQuestion} from \"./topicEditQuestion\";\r\n\r\nexport class TopicEditQuestionPage extends React.Component<ITopicEditQuestionProps> {\r\n    private data: TopicEditQuestion;\r\n\r\n    constructor(props: ITopicEditQuestionProps) {\r\n        super(props);\r\n        this.data = new TopicEditQuestion(() => this.forceUpdate());\r\n\r\n    }\r\n\r\n    public componentDidMount() {\r\n        this.data.unload();\r\n        this.data = new TopicEditQuestion(() => this.forceUpdate());\r\n        this.data.load(this.props);\r\n    }\r\n\r\n    public componentWillUnmount() {\r\n        this.data.unload();\r\n    }\r\n\r\n    public render() {\r\n        if (!this.guardInvalidState()) {\r\n            return \"\";\r\n        }\r\n\r\n        const question = this.data.state.question;\r\n        const topic = this.data.state.topic;\r\n\r\n        return (\r\n            <div className={\"component--TopicHomePage\"}>\r\n                <LayoutStandardHeader user={this.props.user.state}\r\n                                      topic={topic.state}\r\n                                      loading={this.data.updating}/>\r\n                <LayoutFormContainer error={this.data.state.question.error}>\r\n                    <LayoutRightBox expand={true}>\r\n                        <QuestionLink question={question} target={QuestionLinkType.View}>Close</QuestionLink>\r\n                    </LayoutRightBox>\r\n\r\n                    <InfoNotice value={this.data.state.notice}/>\r\n\r\n                    <QuestionForm showTopic={true}\r\n                                  submit={this.onUpdateQuestionEvent}\r\n                                  question={question}\r\n                                  saveText=\"Save\"/>\r\n                </LayoutFormContainer>\r\n\r\n                <LayoutStandardUnsafe user={this.props.user} permissions={[\"CanDelete:Question\"]}>\r\n                    <LayoutRightBox expand={true}>\r\n                        <p>\r\n                            Delete this question?\r\n                        </p>\r\n                        <p>\r\n                            Careful! No undo for this!\r\n                        </p>\r\n                        <button onClick={this.onDeleteQuestion}>Delete question</button>\r\n                    </LayoutRightBox>\r\n                </LayoutStandardUnsafe>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    public guardInvalidState(): boolean {\r\n        return this.data !== null;\r\n    }\r\n\r\n    private onUpdateQuestionEvent = () => this.data.updateQuestion();\r\n\r\n    private onDeleteQuestion = async (e: React.FormEvent) => {\r\n        e.preventDefault();\r\n        await this.data.deleteQuestion();\r\n    }\r\n}\r\n","import * as React from \"react\";\r\nimport {Answer} from \"../../../../../react-pangul-core/src/domain/answer\";\r\nimport {Question} from \"../../../../../react-pangul-core/src/domain/question\";\r\nimport NavigationService from \"../../../infrastructure/service/navigationService\";\r\nimport \"./answerLink.css\";\r\n\r\nexport enum AnswerLinkType {\r\n    Edit,\r\n}\r\n\r\nexport interface IAnswerLink {\r\n    question: Question;\r\n    answer: Answer;\r\n    target: AnswerLinkType;\r\n}\r\n\r\nexport class AnswerLink extends React.Component<IAnswerLink> {\r\n    private nav: NavigationService;\r\n\r\n    public constructor(props: IAnswerLink) {\r\n        super(props);\r\n        this.nav = new NavigationService();\r\n    }\r\n\r\n    public render() {\r\n        if (!this.props.question.state.questionId) {\r\n            return (<React.Fragment/>);\r\n        }\r\n        const linkUrl = this.getUrl();\r\n        return (\r\n            <div className=\"component--AnswerLink\">\r\n                <a href={linkUrl}>{this.props.children}</a>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private getUrl(): string {\r\n        switch (this.props.target) {\r\n            case AnswerLinkType.Edit:\r\n                return this.nav.urlForAnswerEdit(\r\n                    this.props.question.state.topic,\r\n                    this.props.question.state.questionId,\r\n                    this.props.answer.state.answerId);\r\n            default:\r\n                throw new Error(\"Unsupported target\");\r\n        }\r\n    }\r\n}\r\n","import * as React from \"react\";\r\nimport {Answer} from \"../../../../../react-pangul-core/src/domain/answer\";\r\nimport {Question} from \"../../../../../react-pangul-core/src/domain/question\";\r\nimport {Topic} from \"../../../../../react-pangul-core/src/domain/topic\";\r\nimport {SafeMarkdown} from \"../../common/display/safeMarkdown/safeMarkdown\";\r\nimport {LayoutIf} from \"../../layout/layoutIf/layoutIf\";\r\nimport {LayoutRightBottom} from \"../../layout/layoutRightBottom/layoutRightBottom\";\r\nimport {LayoutRightBox} from \"../../layout/layoutRightBox/layoutRightBox\";\r\nimport {VotesAndStars} from \"../../metadata/votesAndStars/votesAndStars\";\r\nimport {UserSummary} from \"../../user/userSummary/userSummary\";\r\nimport {AnswerLink, AnswerLinkType} from \"../answerLink/answerLink\";\r\nimport \"./answerView.css\";\r\n\r\nexport interface IAnswerView {\r\n    answer: Answer;\r\n    question: Question;\r\n    topic: Topic;\r\n}\r\n\r\nexport class AnswerView extends React.Component<IAnswerView> {\r\n    public render() {\r\n        const meta = this.props.answer.state.meta;\r\n\r\n        return (\r\n            <div className=\"component--AnswerView\">\r\n                <LayoutIf show={this.props.answer.state.canEdit}>\r\n                    <LayoutRightBox expand={false}>\r\n                        <AnswerLink question={this.props.question} answer={this.props.answer}\r\n                                    target={AnswerLinkType.Edit}>\r\n                            Edit\r\n                        </AnswerLink>\r\n                    </LayoutRightBox>\r\n                </LayoutIf>\r\n\r\n                <div className=\"metadata\">\r\n                    <VotesAndStars showStars={false}\r\n                                   userStars={0}\r\n                                   userVotes={meta.state.votes}\r\n                                   votes={meta.state.global.votes}\r\n                                   onVote={this.onVote}\r\n                                   onStar={null}/>\r\n                </div>\r\n                <div className=\"output\">\r\n                    <div className=\"rendered\">\r\n                        <SafeMarkdown markdown={this.props.answer.state.body}/>\r\n                    </div>\r\n                    <LayoutRightBottom>\r\n                        <UserSummary user={this.props.answer.state.user}/>\r\n                    </LayoutRightBottom>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private onVote = async (votes: number) => {\r\n        if (votes > 0) {\r\n            await this.props.answer.state.meta.voteUp();\r\n        } else if (votes < 0) {\r\n            await this.props.answer.state.meta.voteDown();\r\n        } else {\r\n            await this.props.answer.state.meta.voteNeutral();\r\n        }\r\n    }\r\n}\r\n","import * as React from \"react\";\r\nimport {Answer} from \"../../../../../react-pangul-core/src/domain/answer\";\r\nimport {QuerySet} from \"../../../../../react-pangul-core/src/domain/querySet\";\r\nimport {Question} from \"../../../../../react-pangul-core/src/domain/question\";\r\nimport {Topic} from \"../../../../../react-pangul-core/src/domain/topic\";\r\nimport {LayoutContentContainer} from \"../../layout/layoutContentContainer/layoutContentContainer\";\r\nimport {AnswerView} from \"../answerView/answerView\";\r\n\r\nexport interface IAnswerList {\r\n    answers: QuerySet<Answer>;\r\n    topic: Topic;\r\n    question: Question;\r\n}\r\n\r\nexport interface IAnswerListState {\r\n    pageSize: number;\r\n    page: number;\r\n}\r\n\r\nexport class AnswerList extends React.Component<IAnswerList> {\r\n    public render() {\r\n        return (\r\n            <div className=\"component--AnswerList\">\r\n                {this.renderAnswerList()}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    public renderAnswerList() {\r\n        if (this.props.answers.state.instances == null) {\r\n            return [];\r\n        }\r\n        return this.props.answers.state.instances.map((answer) => {\r\n            return (\r\n                <LayoutContentContainer key={answer.state.answerId}>\r\n                    <AnswerView answer={answer}\r\n                                question={this.props.question}\r\n                                topic={this.props.topic}/>\r\n                </LayoutContentContainer>\r\n            );\r\n        });\r\n    }\r\n}\r\n","import * as React from \"react\";\r\nimport {IQueryLike} from \"../../../../../../react-pangul-core/src/domain/querySet\";\r\nimport {LayoutContentContainer} from \"../../../layout/layoutContentContainer/layoutContentContainer\";\r\nimport {LayoutIf} from \"../../../layout/layoutIf/layoutIf\";\r\nimport {ErrorNotice} from \"../../errors/errorNotice/errorNotice\";\r\nimport \"./querySetPaginator.css\";\r\n\r\nexport interface IQuerySetPaginator {\r\n    allowedSizes: number[];\r\n    queryState: IQueryLike;\r\n    onNext: () => void;\r\n    onPrev: () => void;\r\n    onChangeSize: (size: number) => void;\r\n    error: Error | null;\r\n}\r\n\r\nexport class QuerySetPaginator extends React.PureComponent<IQuerySetPaginator> {\r\n    public render() {\r\n        const options = this.props.allowedSizes.map((i) => {\r\n            return (\r\n                <option key={i}>{i}</option>\r\n            );\r\n        });\r\n\r\n        return (\r\n            <div className=\"component--QuerySetPaginator\">\r\n                <ErrorNotice error={this.props.error}/>\r\n                <LayoutContentContainer>\r\n                    <div className=\"parts\">\r\n                        <div className=\"part\">\r\n                            Results per page:\r\n                            <select value={this.props.queryState.pageSize} onChange={this.onChangeSize}>\r\n                                {options}\r\n                            </select>\r\n                        </div>\r\n                        <div className=\"part buttons\">\r\n                            <div>\r\n                                <LayoutIf show={this.props.queryState.page > 0}>\r\n                                    <button onClick={this.props.onPrev}>Prev</button>\r\n                                </LayoutIf>\r\n                                <LayoutIf show={this.props.queryState.moreResults}>\r\n                                    <button onClick={this.props.onNext}>Next</button>\r\n                                </LayoutIf>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </LayoutContentContainer>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private onChangeSize = (ev: React.FormEvent<HTMLSelectElement>) => {\r\n        const val = Number(ev.currentTarget.value);\r\n        this.props.onChangeSize(val);\r\n    }\r\n}\r\n","import {Answer} from \"../../../../../react-pangul-core/src/domain/answer\";\r\nimport {QuerySet} from \"../../../../../react-pangul-core/src/domain/querySet\";\r\nimport {Question} from \"../../../../../react-pangul-core/src/domain/question\";\r\nimport {Topic} from \"../../../../../react-pangul-core/src/domain/topic\";\r\nimport {UserContext} from \"../../../../../react-pangul-core/src/domain/userContext\";\r\nimport {Page} from \"../../../infrastructure/componentHelpers/page\";\r\n\r\nconst DEFAULT_PAGE_SIZE = 5;\r\n\r\nexport interface ITopicViewQuestionProps {\r\n    topic: string;\r\n    question: string;\r\n    user: UserContext;\r\n}\r\n\r\ninterface ITopicViewQuestion {\r\n    topic: Topic;\r\n    question: Question;\r\n    answers: QuerySet<Answer>;\r\n    pageSize: number;\r\n    notice: string | null;\r\n}\r\n\r\nexport class TopicViewQuestion extends Page<ITopicViewQuestionProps, ITopicViewQuestion> {\r\n    public async next(): Promise<void> {\r\n        await this.update(async () => {\r\n            await this.state.answers.next();\r\n            return null;\r\n        });\r\n    }\r\n\r\n    public async prev(): Promise<void> {\r\n        await this.update(async () => {\r\n            await this.state.answers.prev();\r\n            return null;\r\n        });\r\n    }\r\n\r\n    public async setPageSize(pageSize: number) {\r\n        await this.update(async () => {\r\n            return {pageSize};\r\n        });\r\n        await this.refreshData();\r\n    }\r\n\r\n    protected async loadInitialData(fromProps: ITopicViewQuestionProps): Promise<void> {\r\n        await this.update(async () => {\r\n            const topic = await Topic.get(fromProps.topic);\r\n            if (topic.error) {\r\n                throw topic.error;\r\n            }\r\n\r\n            const question = await Question.get(fromProps.question);\r\n            if (question.error) {\r\n                throw question.error;\r\n            }\r\n\r\n            return {question, topic};\r\n        });\r\n\r\n        await this.refreshData();\r\n    }\r\n\r\n    protected blank(): ITopicViewQuestion {\r\n        return {\r\n            answers: new QuerySet<Answer>(),\r\n            notice: null,\r\n            pageSize: DEFAULT_PAGE_SIZE,\r\n            question: new Question(),\r\n            topic: new Topic(),\r\n        };\r\n    }\r\n\r\n    protected rebind(): void {\r\n        this.state.topic.parent = this;\r\n        this.state.question.parent = this;\r\n        this.state.answers.parent = this;\r\n    }\r\n\r\n    protected async refreshData(): Promise<void> {\r\n        await this.update(async () => {\r\n            const question = this.state.question;\r\n            const answers = await Answer.search(question.state.questionId, this.state.pageSize);\r\n            return {answers};\r\n        });\r\n    }\r\n}\r\n","import * as React from \"react\";\r\nimport {AnswerList} from \"../../../components/answer/answerList/answerList\";\r\nimport {QuerySetPaginator} from \"../../../components/common/fragments/querySetPaginator/querySetPaginator\";\r\nimport {LayoutContentContainer} from \"../../../components/layout/layoutContentContainer/layoutContentContainer\";\r\nimport {LayoutIf} from \"../../../components/layout/layoutIf/layoutIf\";\r\nimport {LayoutRightBox} from \"../../../components/layout/layoutRightBox/layoutRightBox\";\r\nimport {LayoutStandardHeader} from \"../../../components/layout/layoutStandardHeader/layoutStandardHeader\";\r\nimport {QuestionLink, QuestionLinkType} from \"../../../components/question/questionLink/questionLink\";\r\nimport {QuestionView} from \"../../../components/question/questionView/questionView\";\r\nimport {TopicLink, TopicLinkType} from \"../../../components/topic/topicLink/topicLink\";\r\nimport {ITopicViewQuestionProps, TopicViewQuestion} from \"./topicViewQuestion\";\r\n\r\nexport class TopicViewQuestionPage extends React.Component<ITopicViewQuestionProps> {\r\n    private data: TopicViewQuestion;\r\n\r\n    constructor(props: ITopicViewQuestionProps) {\r\n        super(props);\r\n        this.data = new TopicViewQuestion(() => this.forceUpdate());\r\n\r\n    }\r\n\r\n    public componentDidMount() {\r\n        this.data.unload();\r\n        this.data = new TopicViewQuestion(() => this.forceUpdate());\r\n        this.data.load(this.props);\r\n    }\r\n\r\n    public componentWillUnmount() {\r\n        this.data.unload();\r\n    }\r\n\r\n    public render() {\r\n        if (!this.guardInvalidState()) {\r\n            return \"\";\r\n        }\r\n\r\n        const question = this.data.state.question;\r\n        const answers = this.data.state.answers;\r\n        const topic = this.data.state.topic;\r\n\r\n        return (\r\n            <div className={\"component--TopicViewQuestionPage\"}>\r\n                <LayoutStandardHeader user={this.props.user.state}\r\n                                      topic={topic.state}\r\n                                      loading={this.data.updating}/>\r\n\r\n                <LayoutContentContainer>\r\n                    <LayoutRightBox expand={false}>\r\n                        <LayoutIf show={question.state.canEdit}>\r\n                            <QuestionLink question={question} target={QuestionLinkType.Edit}>Edit</QuestionLink>\r\n                        </LayoutIf>\r\n                        <TopicLink topic={question.state.topic} target={TopicLinkType.View}>Close</TopicLink>\r\n                    </LayoutRightBox>\r\n                    <QuestionView question={question}/>\r\n                </LayoutContentContainer>\r\n\r\n                <AnswerList topic={this.data.state.topic}\r\n                            question={this.data.state.question}\r\n                            answers={this.data.state.answers}/>\r\n\r\n                <QuerySetPaginator allowedSizes={[1, 5, 10, 25]}\r\n                                   queryState={answers.state}\r\n                                   onChangeSize={this.onChangeSize}\r\n                                   onNext={this.onNext}\r\n                                   onPrev={this.onPrev}\r\n                                   error={answers.error}/>\r\n\r\n                <LayoutContentContainer>\r\n                    <LayoutRightBox expand={true}>\r\n                        <QuestionLink question={question} target={QuestionLinkType.Answer}>\r\n                            <button>Answer Question</button>\r\n                        </QuestionLink>\r\n                    </LayoutRightBox>\r\n                </LayoutContentContainer>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    public guardInvalidState(): boolean {\r\n        return this.data !== null;\r\n    }\r\n\r\n    private onChangeSize = (size: number) => this.data.setPageSize(size);\r\n\r\n    private onNext = () => this.data.next();\r\n\r\n    private onPrev = () => this.data.prev();\r\n}\r\n","import * as React from \"react\";\r\nimport { Subject } from \"rxjs\";\r\nimport { debounceTime } from \"rxjs/operators\";\r\nimport { LayoutFormContainer } from \"../../../layout/layoutFormContainer/layoutFormContainer\";\r\nimport { InputEditor } from \"../../editors/inputEditor/inputEditor\";\r\nimport \"./searchBar.css\";\r\n\r\nexport interface ISearchBar {\r\n    value: string;\r\n    onChange: (value: string) => void;\r\n    error: Error | null;\r\n    debounce: number;\r\n}\r\n\r\nexport class SearchBar extends React.Component<ISearchBar> {\r\n    public static defaultProps: Partial<ISearchBar> = {\r\n        debounce: 200,\r\n    };\r\n\r\n    private searchStream = new Subject<string>();\r\n\r\n    constructor(props: ISearchBar) {\r\n        super(props);\r\n        this.searchStream.pipe(debounceTime(this.props.debounce)).subscribe(async (value: string) => {\r\n            this.props.onChange(value);\r\n        });\r\n    }\r\n\r\n    public render() {\r\n        return (\r\n            <div className=\"component--SearchBar\">\r\n                <LayoutFormContainer error={this.props.error}>\r\n                    <form>\r\n                        <fieldset>\r\n                            <InputEditor value={this.props.value} onChange={this.onChangeEvent}/>\r\n                        </fieldset>\r\n                    </form>\r\n                </LayoutFormContainer>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private onChangeEvent = (value: string) => this.searchStream.next(value);\r\n}\r\n","import * as React from \"react\";\r\nimport { Topic } from \"../../../../../react-pangul-core/src/domain/topic\";\r\nimport { TopicLink, TopicLinkType } from \"../topicLink/topicLink\";\r\nimport \"./topicView.css\";\r\n\r\nexport interface ITopicView {\r\n    topic: Topic;\r\n}\r\n\r\nconst TopicIcon = (props: ITopicView) => {\r\n    if (!props.topic.state.icon) {\r\n        return <React.Fragment/>;\r\n    }\r\n    return (\r\n        <div className=\"icon\">\r\n            <img src={props.topic.state.icon}/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport class TopicView extends React.Component<ITopicView> {\r\n    public render() {\r\n        const description = this.props.topic.state.description || \"no description\";\r\n        return (\r\n            <div className=\"component--TopicView\">\r\n                <TopicIcon topic={this.props.topic}/>\r\n                <div>\r\n                    <div>\r\n                        <TopicLink topic={this.props.topic.state.name} target={TopicLinkType.View}>\r\n                            <h2>{this.props.topic.state.name}</h2>\r\n                        </TopicLink>\r\n                    </div>\r\n                    <div>{description}</div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import * as React from \"react\";\r\nimport {QuerySet} from \"../../../../../react-pangul-core/src/domain/querySet\";\r\nimport {Topic} from \"../../../../../react-pangul-core/src/domain/topic\";\r\nimport {LayoutContentContainer} from \"../../layout/layoutContentContainer/layoutContentContainer\";\r\nimport {TopicView} from \"../topicView/topicView\";\r\nimport \"./topicList.css\";\r\n\r\nexport interface ITopicList {\r\n    topics: QuerySet<Topic>;\r\n}\r\n\r\nexport interface ITopicListState {\r\n    pageSize: number;\r\n    page: number;\r\n}\r\n\r\nexport class TopicList extends React.Component<ITopicList, ITopicListState> {\r\n    constructor(props: ITopicList) {\r\n        super(props);\r\n        this.state = {\r\n            page: 0,\r\n            pageSize: 10,\r\n        };\r\n    }\r\n\r\n    public render() {\r\n        return (\r\n            <div className=\"component--TopicList\">\r\n                {this.renderList()}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    public renderList() {\r\n        if (this.props.topics.state.instances == null) {\r\n            return [];\r\n        }\r\n        return this.props.topics.state.instances.map((topic) => {\r\n            if (!topic.state.topicId) {\r\n                return (<React.Fragment/>);\r\n            }\r\n            return (\r\n                <div className=\"item\" key={topic.state.topicId}>\r\n                    <LayoutContentContainer>\r\n                        <TopicView topic={topic}/>\r\n                    </LayoutContentContainer>\r\n                </div>\r\n            );\r\n        });\r\n    }\r\n}\r\n","import {Model} from \"../../../react-stateful/src/model\";\r\nimport {QuestionsController} from \"../controllers/questionsController\";\r\nimport {IQueryResult, QuerySet} from \"./querySet\";\r\nimport {QuestionMeta} from \"./questionMeta\";\r\nimport {UserView} from \"./userView\";\r\n\r\nexport interface IQuestionSummary {\r\n    canEdit: boolean;\r\n    questionId: string;\r\n    topic: string;\r\n    title: string;\r\n    summary: string;\r\n    answer: string | null;\r\n    tags: string[];\r\n    user: UserView;\r\n    meta: QuestionMeta;\r\n}\r\n\r\nexport class QuestionSummary extends Model<IQuestionSummary> {\r\n    /** Return a answer instance */\r\n    public static async get(questionId: string): Promise<QuestionSummary> {\r\n        const question = new QuestionSummary();\r\n        question.state.questionId = questionId;\r\n        await question.refresh();\r\n        return question;\r\n    }\r\n\r\n    /** Search for topics */\r\n    public static search(query: string, pageSize: number = 10, page: number = 0): Promise<QuerySet<QuestionSummary>> {\r\n        return QuerySet.fromQuery({\r\n            fetchIds: QuestionSummary.searchForIds,\r\n            fetchInstance: QuestionSummary.get,\r\n            pageSize,\r\n            query,\r\n        }, page);\r\n    }\r\n\r\n    private static async searchForIds(query: string, offset: number, limit: number): Promise<IQueryResult> {\r\n        const controller = new QuestionsController();\r\n        return await controller.search(query, offset, limit);\r\n    }\r\n\r\n    /** Refresh a answer instance */\r\n    public async refresh(): Promise<void> {\r\n        await this.update(async () => await this.fetchQuestionData(this.state.questionId));\r\n    }\r\n\r\n    protected blank(): IQuestionSummary {\r\n        return {\r\n            answer: null,\r\n            canEdit: false,\r\n            meta: new QuestionMeta(),\r\n            questionId: \"\",\r\n            summary: \"...\",\r\n            tags: [],\r\n            title: \"new answer\",\r\n            topic: \"default\",\r\n            user: new UserView(),\r\n        };\r\n    }\r\n\r\n    protected async fetchQuestionData(questionId: string): Promise<IQuestionSummary> {\r\n        const controller = new QuestionsController();\r\n        const questionData = await controller.getSummary(questionId);\r\n        const meta = new QuestionMeta(await controller.getMetadata(questionId));\r\n        const user = await UserView.get(questionData.userId);\r\n        return {\r\n            ...questionData,\r\n            meta,\r\n            user,\r\n        };\r\n    }\r\n\r\n    protected rebind(): void {\r\n        this.state.meta.parent = this;\r\n    }\r\n}\r\n","import { QuerySet } from \"../../../../../react-pangul-core/src/domain/querySet\";\r\nimport { Topic } from \"../../../../../react-pangul-core/src/domain/topic\";\r\nimport { UserContext } from \"../../../../../react-pangul-core/src/domain/userContext\";\r\nimport { Page } from \"../../../infrastructure/componentHelpers/page\";\r\nimport {QuestionSummary} from \"../../../../../react-pangul-core/src/domain/questionSummary\";\r\n\r\nexport interface TopicDiscoverProps {\r\n    search: string;\r\n    user: UserContext;\r\n}\r\n\r\ninterface TopicDiscoverState {\r\n    search: string;\r\n    topics: QuerySet<Topic>;\r\n    questions: QuerySet<QuestionSummary>;\r\n}\r\n\r\nexport class TopicDiscover extends Page<TopicDiscoverProps, TopicDiscoverState> {\r\n    constructor(forceUpdate: () => void) {\r\n        super(forceUpdate);\r\n    }\r\n\r\n    public async search(value: string): Promise<void> {\r\n        await this.update(async () => {\r\n            return {search: value};\r\n        });\r\n\r\n        await this.update(async () => {\r\n            const topics = await Topic.search(value);\r\n            if (topics.error) {\r\n                throw topics.error;\r\n            }\r\n\r\n            const query = `topic:* ${value}`;\r\n            const questions = await QuestionSummary.search(query, 10);\r\n            if (questions.error) {\r\n                throw questions.error;\r\n            }\r\n\r\n            return {topics, questions};\r\n        });\r\n    }\r\n\r\n    protected async loadInitialData(fromProps: TopicDiscoverProps): Promise<void> {\r\n        await this.update(async () => {\r\n            const topics = await Topic.search(fromProps.search);\r\n            if (topics.error) {\r\n                throw topics.error;\r\n            }\r\n\r\n            return {topics, search: fromProps.search};\r\n        });\r\n    }\r\n\r\n    protected blank(): TopicDiscoverState {\r\n        return {\r\n            search: \"\",\r\n            topics: new QuerySet<Topic>(),\r\n            questions: new QuerySet<QuestionSummary>()\r\n        };\r\n    }\r\n\r\n    protected rebind(): void {\r\n        this.state.topics.parent = this;\r\n    }\r\n}\r\n","import * as React from \"react\";\r\nimport \"./votesAndStarsReadonly.css\";\r\n\r\nexport interface IVotesAndStarsReadonly {\r\n    votes: number;\r\n    userVotes: number;\r\n    userStars: number;\r\n}\r\n\r\nexport class VotesAndStarsReadonly extends React.Component<IVotesAndStarsReadonly> {\r\n    public render() {\r\n        const upStyles = this.props.userVotes > 0 ? [\"up\", \"active\"] : [\"up\"];\r\n        const downStyles = this.props.userVotes < 0 ? [\"down\", \"active\"] : [\"down\"];\r\n        const starStyles = this.props.userStars > 0 ? [\"star\", \"active\"] : [\"star\"];\r\n        return (\r\n            <div className=\"component--VotesAndStarsReadonly\">\r\n                <li>\r\n                    <div className={upStyles.join(\" \")}/>\r\n                </li>\r\n                <li>\r\n                    <div className=\"votes\">{this.props.votes}</div>\r\n                </li>\r\n                <li>\r\n                    <div className={downStyles.join(\" \")} />\r\n                </li>\r\n                <li className=\"star-container\">\r\n                    <div className={starStyles.join(\" \")}/>\r\n                </li>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import * as React from \"react\";\r\nimport {QuestionSummary} from \"../../../../../react-pangul-core/src/domain/questionSummary\";\r\nimport {SafeMarkdown} from \"../../common/display/safeMarkdown/safeMarkdown\";\r\nimport {LayoutRightBottom} from \"../../layout/layoutRightBottom/layoutRightBottom\";\r\nimport {VotesAndStarsReadonly} from \"../../metadata/votesAndStarsReadonly/votesAndStarsReadonly\";\r\nimport {TagList} from \"../../tag/tagList/tagList\";\r\nimport {UserSummary} from \"../../user/userSummary/userSummary\";\r\nimport {QuestionLink, QuestionLinkType} from \"../questionLink/questionLink\";\r\nimport \"./questionSummaryView.css\";\r\n\r\nexport interface IQuestionSummaryView {\r\n    question: QuestionSummary;\r\n}\r\n\r\nexport class QuestionSummaryView extends React.Component<IQuestionSummaryView> {\r\n    public render() {\r\n        const meta = this.props.question.state.meta;\r\n        return (\r\n            <div className=\"component--QuestionSummaryView\">\r\n                <div className=\"metadata\">\r\n                    <VotesAndStarsReadonly\r\n                        userStars={meta.state.star ? 1 : 0}\r\n                        userVotes={meta.state.votes}\r\n                        votes={meta.state.global.votes}/>\r\n                </div>\r\n                <div className=\"output\">\r\n                    <QuestionLink question={this.props.question} target={QuestionLinkType.View}>\r\n                        <h2>{this.props.question.state.title}</h2>\r\n                    </QuestionLink>\r\n                    <TagList tags={this.props.question.state.tags} topic={this.props.question.state.topic}/>\r\n                    <SafeMarkdown markdown={this.props.question.state.summary}/>\r\n                    {this.renderAnswer()}\r\n                    <LayoutRightBottom>\r\n                        <UserSummary user={this.props.question.state.user}/>\r\n                    </LayoutRightBottom>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private renderAnswer() {\r\n        if (!this.props.question.state.answer) {\r\n            return <React.Fragment/>;\r\n        }\r\n        return (\r\n            <div className=\"answer\">\r\n                <SafeMarkdown markdown={this.props.question.state.answer}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import * as React from \"react\";\r\nimport {QuerySet} from \"../../../../../react-pangul-core/src/domain/querySet\";\r\nimport {QuestionSummary} from \"../../../../../react-pangul-core/src/domain/questionSummary\";\r\nimport {LayoutContentContainer} from \"../../layout/layoutContentContainer/layoutContentContainer\";\r\nimport {QuestionSummaryView} from \"../questionSummaryView/questionSummaryView\";\r\nimport \"./questionSummaryList.css\";\r\n\r\nexport interface QuestionSummaryListProps {\r\n    questions: QuerySet<QuestionSummary>;\r\n    showEmpty: boolean;\r\n}\r\n\r\nexport interface QuestionSummaryListState {\r\n    pageSize: number;\r\n    page: number;\r\n}\r\n\r\nexport class QuestionSummaryList extends React.Component<QuestionSummaryListProps, QuestionSummaryListState> {\r\n    constructor(props: QuestionSummaryListProps) {\r\n        super(props);\r\n        this.state = {\r\n            page: 0,\r\n            pageSize: 10,\r\n        };\r\n    }\r\n\r\n    public render() {\r\n        return (\r\n            <div className=\"component--QuestionSummaryList\">\r\n                {this.renderList()}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    public renderList() {\r\n        if (this.props.questions.state.instances === null || this.props.questions.state.instances.length === 0) {\r\n            if (!this.props.showEmpty) {\r\n                return <></>;\r\n            }\r\n            return (\r\n                <LayoutContentContainer>\r\n                    No questions found\r\n                </LayoutContentContainer>\r\n            );\r\n        }\r\n        return this.props.questions.state.instances.map((question) => {\r\n            if (!question.state.questionId) {\r\n                return (<React.Fragment/>);\r\n            }\r\n            return (\r\n                <LayoutContentContainer key={question.state.questionId}>\r\n                    <QuestionSummaryView question={question}/>\r\n                </LayoutContentContainer>\r\n            );\r\n        });\r\n    }\r\n}\r\n","import * as React from \"react\";\r\nimport { SearchBar } from \"../../../components/common/fragments/searchBar/searchBar\";\r\nimport { LayoutStandardHeader } from \"../../../components/layout/layoutStandardHeader/layoutStandardHeader\";\r\nimport { TopicList } from \"../../../components/topic/topicList/topicList\";\r\nimport { TopicDiscoverProps, TopicDiscover } from \"./topicDiscover\";\r\nimport {QuestionSummaryList} from \"../../../components/question/questionSummaryList/questionSummaryList\";\r\n\r\nexport class TopicDiscoverPage extends React.Component<TopicDiscoverProps> {\r\n    private data: TopicDiscover;\r\n\r\n    constructor(props: TopicDiscoverProps) {\r\n        super(props);\r\n        this.data = new TopicDiscover(() => this.forceUpdate());\r\n    }\r\n\r\n    public componentDidMount() {\r\n        this.data.unload();\r\n        this.data = new TopicDiscover(() => this.forceUpdate());\r\n        this.data.load(this.props);\r\n    }\r\n\r\n    public componentWillUnmount() {\r\n        this.data.unload();\r\n    }\r\n\r\n    public render() {\r\n        if (!this.guardInvalidState()) {\r\n            return (<React.Fragment/>);\r\n        }\r\n\r\n        const search = this.data.state.search;\r\n        const topics = this.data.state.topics;\r\n        const questions = this.data.state.questions;\r\n\r\n        return (\r\n            <div className={\"component--TopicDiscoverPage\"}>\r\n                <LayoutStandardHeader user={this.props.user.state}\r\n                                      topic={null}\r\n                                      loading={this.data.updating}/>\r\n\r\n                <SearchBar value={search}\r\n                           onChange={this.onSearchEvent}\r\n                           error={this.data.error}/>\r\n\r\n                <TopicList topics={topics}/>\r\n\r\n                <QuestionSummaryList questions={questions} showEmpty={false}/>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    public guardInvalidState(): boolean {\r\n        return this.data !== null;\r\n    }\r\n\r\n    private onSearchEvent = (value: string) => this.onSearch(value);\r\n\r\n    private onSearch(value: string) {\r\n        this.data.search(value);\r\n    }\r\n}\r\n","import * as React from \"react\";\r\nimport \"./inlineImgEditor.css\";\r\n\r\nexport interface IInlineImgEditor {\r\n    value: string | null;\r\n    onChange: (body: string) => void;\r\n}\r\n\r\nexport interface IInlineImgEditorState {\r\n    value: string;\r\n    loaded: number;\r\n    total: number;\r\n    loading: boolean;\r\n    lastPropValue: string;\r\n}\r\n\r\nconst RenderImg = (props: IInlineImgEditor) => {\r\n    if (!props.value) {\r\n        return (<React.Fragment/>);\r\n    }\r\n    return (\r\n        <img src={props.value}/>\r\n    );\r\n};\r\n\r\nexport class InlineImgEditor extends React.Component<IInlineImgEditor, IInlineImgEditorState> {\r\n    public static getDerivedStateFromProps(props: IInlineImgEditor, state: IInlineImgEditorState) {\r\n        if (props.value !== state.lastPropValue) {\r\n            return {value: props.value, lastPropValue: props.value};\r\n        }\r\n        return null;\r\n    }\r\n\r\n    constructor(props: IInlineImgEditor) {\r\n        super(props);\r\n        this.state = {\r\n            lastPropValue: \"\",\r\n            loaded: 0,\r\n            loading: false,\r\n            total: 0,\r\n            value: \"\",\r\n        };\r\n    }\r\n\r\n    public render() {\r\n        return (\r\n            <div className=\"component--InlineImgEditor\">\r\n                <div className=\"preview\">\r\n                    <RenderImg {...this.props}/>\r\n                </div>\r\n                {!this.state.loading ? <React.Fragment/> : (\r\n                    <div className=\"progress\">\r\n                        {this.state.loaded} / {this.state.total}\r\n                    </div>\r\n                )}\r\n                <input type=\"file\" onChange={this.onChangeEvent}/>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private onChangeEvent = (e: React.FormEvent<HTMLInputElement>) => this.onChange(e);\r\n\r\n    /**\r\n     * Prevent react from jumping the cursor as you type\r\n     */\r\n    private onChange(event: React.FormEvent<HTMLInputElement>) {\r\n        if (event.currentTarget.files && event.currentTarget.files.length > 0) {\r\n            const file = event.currentTarget.files [0];\r\n            const reader = new FileReader();\r\n            this.setState({loading: true}, () => {\r\n                reader.onloadend = (ev: ProgressEvent) => {\r\n                    const value = reader.result as string;\r\n                    this.setState({\r\n                        loaded: ev.loaded,\r\n                        loading: false,\r\n                        total: ev.total,\r\n                        value,\r\n                    }, () => {\r\n                        this.props.onChange(value);\r\n                    });\r\n                };\r\n                reader.onprogress = (ev: ProgressEvent) => {\r\n                    this.setState({\r\n                        loaded: ev.loaded,\r\n                        total: ev.total,\r\n                    });\r\n                };\r\n                reader.readAsDataURL(file);\r\n            });\r\n        }\r\n    }\r\n}\r\n","import * as React from \"react\";\r\nimport { Topic } from \"../../../../../react-pangul-core/src/domain/topic\";\r\nimport { InlineImgEditor } from \"../../common/editors/inlineImgEditor/inlineImgEditor\";\r\nimport { InputEditor } from \"../../common/editors/inputEditor/inputEditor\";\r\n\r\nexport interface ITopicForm {\r\n    submit: () => void;\r\n    topic: Topic;\r\n    saveText: string;\r\n}\r\n\r\nexport class TopicForm extends React.Component<ITopicForm> {\r\n    public render() {\r\n        return (\r\n            <div className=\"component--Question\">\r\n                <form action=\"\" onSubmit={this.onSaveEvent}>\r\n                    <fieldset>\r\n                        <InputEditor value={this.props.topic.state.description} onChange={this.onDescChangedEvent}/>\r\n                    </fieldset>\r\n                    <fieldset>\r\n                        <InlineImgEditor value={this.props.topic.state.icon} onChange={this.onIconChangedEvent}/>\r\n                    </fieldset>\r\n                    <fieldset className=\"buttons\">\r\n                        <button className=\"submit\">{this.props.saveText}</button>\r\n                    </fieldset>\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private onDescChangedEvent = (desc: string) => this.onDescChanged(desc);\r\n    private onIconChangedEvent = (icon: string) => this.onIconChanged(icon);\r\n    private onSaveEvent = (e: React.FormEvent) => this.onSave(e);\r\n\r\n    private onSave(e: React.FormEvent) {\r\n        e.preventDefault();\r\n        this.props.submit();\r\n    }\r\n\r\n    private onDescChanged(desc: string) {\r\n        this.props.topic.update(async () => {\r\n            return {description: desc};\r\n        });\r\n    }\r\n\r\n    private onIconChanged(icon: string) {\r\n        this.props.topic.update(async () => {\r\n            return {icon};\r\n        });\r\n    }\r\n}\r\n","import {Topic} from \"../../../../../react-pangul-core/src/domain/topic\";\r\nimport {UserContext} from \"../../../../../react-pangul-core/src/domain/userContext\";\r\nimport {Page} from \"../../../infrastructure/componentHelpers/page\";\r\n\r\nexport interface ITopicEditProps {\r\n    topic: string;\r\n    user: UserContext;\r\n}\r\n\r\ninterface ITopicEdit {\r\n    topic: Topic;\r\n    notice: string | null;\r\n}\r\n\r\nexport class TopicEdit extends Page<ITopicEditProps, ITopicEdit> {\r\n    public async saveTopic() {\r\n        await this.update(async () => {\r\n            return Promise.resolve({notice: null});\r\n        });\r\n        await this.state.topic.save();\r\n        if (this.state.topic.error === null) {\r\n            await this.update(async () => {\r\n                return Promise.resolve({notice: \"Saved topic\"});\r\n            });\r\n        }\r\n    }\r\n\r\n    public async deleteTopic() {\r\n        await this.state.topic.delete();\r\n    }\r\n\r\n    protected async loadInitialData(fromProps: ITopicEditProps): Promise<void> {\r\n        await this.update(async () => {\r\n            const topic = await Topic.get(fromProps.topic);\r\n            if (topic.error) {\r\n                throw topic.error;\r\n            }\r\n\r\n            return {topic};\r\n        });\r\n    }\r\n\r\n    protected blank(): ITopicEdit {\r\n        return {\r\n            notice: null,\r\n            topic: new Topic(),\r\n        };\r\n    }\r\n\r\n    protected rebind(): void {\r\n        this.state.topic.parent = this;\r\n    }\r\n}\r\n","import * as React from \"react\";\r\nimport {Redirect} from \"react-router\";\r\nimport {InfoNotice} from \"../../../components/common/display/infoNotice/infoNotice\";\r\nimport {LayoutContentContainer} from \"../../../components/layout/layoutContentContainer/layoutContentContainer\";\r\nimport {LayoutFormContainer} from \"../../../components/layout/layoutFormContainer/layoutFormContainer\";\r\nimport {LayoutRightBox} from \"../../../components/layout/layoutRightBox/layoutRightBox\";\r\nimport {LayoutStandardHeader} from \"../../../components/layout/layoutStandardHeader/layoutStandardHeader\";\r\nimport {LayoutUnsafeBox} from \"../../../components/layout/layoutUnsafeBox/layoutUnsafeBox\";\r\nimport {LayoutWithPermissions} from \"../../../components/layout/layoutWithPermissions/layoutWithPermissions\";\r\nimport {TopicForm} from \"../../../components/topic/topicForm/topicForm\";\r\nimport NavigationService from \"../../../infrastructure/service/navigationService\";\r\nimport {ITopicEditProps, TopicEdit} from \"./topicEdit\";\r\n\r\nexport class TopicEditPage extends React.Component<ITopicEditProps> {\r\n    private data: TopicEdit;\r\n    private redirect: boolean;\r\n\r\n    constructor(props: ITopicEditProps) {\r\n        super(props);\r\n        this.redirect = false;\r\n        this.data = new TopicEdit(() => this.forceUpdate());\r\n    }\r\n\r\n    public componentDidMount() {\r\n        this.data.unload();\r\n        this.data = new TopicEdit(() => this.forceUpdate());\r\n        this.data.load(this.props);\r\n    }\r\n\r\n    public componentWillUnmount() {\r\n        this.data.unload();\r\n    }\r\n\r\n    public render() {\r\n        if (this.redirect) {\r\n            const home = new NavigationService().urlForRoot();\r\n            return <Redirect to={home}/>;\r\n        }\r\n\r\n        if (!this.guardInvalidState()) {\r\n            return <React.Fragment/>;\r\n        }\r\n\r\n        const topic = this.data.state.topic;\r\n\r\n        return (\r\n            <div className={\"component--TopicHomePage\"}>\r\n                <LayoutStandardHeader user={this.props.user.state}\r\n                                      topic={topic.state}\r\n                                      loading={this.data.updating}/>\r\n\r\n                <LayoutFormContainer error={this.data.state.topic.error}>\r\n                    <InfoNotice value={this.data.state.notice}/>\r\n                    <TopicForm submit={this.onSubmitFormEvent} topic={topic} saveText=\"Save\"/>\r\n                </LayoutFormContainer>\r\n\r\n                <LayoutWithPermissions user={this.props.user} requirePermissions={[\"CanDelete:Topic\"]}>\r\n                    <LayoutContentContainer>\r\n                        <LayoutUnsafeBox title=\"Unsafe commands\">\r\n                            <form>\r\n                                <fieldset>\r\n                                    <LayoutRightBox expand={true}>\r\n                                        <p>\r\n                                            Accidentally created this topic?\r\n                                        </p>\r\n                                        <p>\r\n                                            If it has no questions it can be deleted.\r\n                                        </p>\r\n                                        <p>\r\n                                            Careful! No undo for this!\r\n                                        </p>\r\n                                        <button onClick={this.onDeleteTopic}>Delete topic</button>\r\n                                    </LayoutRightBox>\r\n                                </fieldset>\r\n                            </form>\r\n                        </LayoutUnsafeBox>\r\n                    </LayoutContentContainer>\r\n                </LayoutWithPermissions>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    public guardInvalidState(): boolean {\r\n        return this.data !== null;\r\n    }\r\n\r\n    private onSubmitFormEvent = async () => await this.data.saveTopic();\r\n\r\n    private onDeleteTopic = async (e: React.FormEvent) => {\r\n        e.preventDefault();\r\n        await this.data.deleteTopic();\r\n        if (!this.data.state.topic.error) {\r\n            this.redirect = true;\r\n        }\r\n    }\r\n}\r\n","import { QuerySet } from \"../../../../../react-pangul-core/src/domain/querySet\";\r\nimport { QuestionSummary } from \"../../../../../react-pangul-core/src/domain/questionSummary\";\r\nimport { Topic } from \"../../../../../react-pangul-core/src/domain/topic\";\r\nimport { UserContext } from \"../../../../../react-pangul-core/src/domain/userContext\";\r\nimport { Page } from \"../../../infrastructure/componentHelpers/page\";\r\n\r\nconst DEFAULT_PAGE_SIZE = 5;\r\n\r\nexport interface ITopicViewQuestionProps {\r\n    topic: string;\r\n    search: string;\r\n    user: UserContext;\r\n}\r\n\r\ninterface ITopicHome {\r\n    topic: Topic;\r\n    search: string;\r\n    pageSize: number;\r\n    questions: QuerySet<QuestionSummary>;\r\n}\r\n\r\nexport class TopicSearch extends Page<ITopicViewQuestionProps, ITopicHome> {\r\n    constructor(forceUpdate: () => void) {\r\n        super(forceUpdate);\r\n    }\r\n\r\n    public async search(value: string): Promise<void> {\r\n        await this.update(async () => {\r\n            return {search: value};\r\n        });\r\n\r\n        await this.refreshData();\r\n    }\r\n\r\n    public async next(): Promise<void> {\r\n        await this.state.questions.next();\r\n    }\r\n\r\n    public async prev(): Promise<void> {\r\n        await this.state.questions.prev();\r\n    }\r\n\r\n    public async setPageSize(pageSize: number) {\r\n        await this.update(async () => {\r\n            return {pageSize};\r\n        });\r\n        await this.refreshData();\r\n    }\r\n\r\n    protected async loadInitialData(fromProps: ITopicViewQuestionProps): Promise<void> {\r\n        await this.update(async () => {\r\n            const topic = await Topic.get(fromProps.topic);\r\n            if (topic.error) {\r\n                throw topic.error;\r\n            }\r\n\r\n            return {topic, search: fromProps.search};\r\n        });\r\n        await this.refreshData();\r\n    }\r\n\r\n    protected async refreshData(): Promise<void> {\r\n        await this.update(async () => {\r\n            const query = `topic:${this.state.topic.state.name} ${this.state.search}`;\r\n            const questions = await QuestionSummary.search(query, this.state.pageSize);\r\n            if (questions.error) {\r\n                throw questions.error;\r\n            }\r\n\r\n            return {questions};\r\n        });\r\n    }\r\n\r\n    protected blank(): ITopicHome {\r\n        return {\r\n            pageSize: DEFAULT_PAGE_SIZE,\r\n            questions: new QuerySet<QuestionSummary>(),\r\n            search: \"\",\r\n            topic: new Topic(),\r\n        };\r\n    }\r\n\r\n    protected rebind(): void {\r\n        this.state.topic.parent = this;\r\n        this.state.questions.parent = this;\r\n    }\r\n}\r\n","import * as React from \"react\";\r\nimport {QuerySetPaginator} from \"../../../components/common/fragments/querySetPaginator/querySetPaginator\";\r\nimport {SearchBar} from \"../../../components/common/fragments/searchBar/searchBar\";\r\nimport {LayoutContentContainer} from \"../../../components/layout/layoutContentContainer/layoutContentContainer\";\r\nimport {LayoutRightBox} from \"../../../components/layout/layoutRightBox/layoutRightBox\";\r\nimport {LayoutStandardHeader} from \"../../../components/layout/layoutStandardHeader/layoutStandardHeader\";\r\nimport {QuestionSummaryList} from \"../../../components/question/questionSummaryList/questionSummaryList\";\r\nimport {TopicLink, TopicLinkType} from \"../../../components/topic/topicLink/topicLink\";\r\nimport {ITopicViewQuestionProps, TopicSearch} from \"./topicSearch\";\r\n\r\ninterface ITopicViewQuestionState {\r\n    lastSearchProp: string;\r\n}\r\n\r\nexport class TopicSearchPage extends React.Component<ITopicViewQuestionProps, ITopicViewQuestionState> {\r\n    private data: TopicSearch;\r\n\r\n    constructor(props: ITopicViewQuestionProps) {\r\n        super(props);\r\n        this.data = new TopicSearch(() => this.forceUpdate());\r\n        this.state = {\r\n            lastSearchProp: \"\"\r\n        };\r\n    }\r\n\r\n    public componentDidMount() {\r\n        this.data.unload();\r\n        this.data = new TopicSearch(() => this.forceUpdate());\r\n        this.data.load(this.props);\r\n    }\r\n\r\n    public componentWillUnmount() {\r\n        this.data.unload();\r\n    }\r\n\r\n    public componentDidUpdate(prevProps: Readonly<ITopicViewQuestionProps>, prevState: Readonly<{}>, snapshot?: any): void {\r\n        if (this.props.search !== this.state.lastSearchProp) {\r\n            this.setState({lastSearchProp: this.props.search}, () => {\r\n                this.data.load(this.props);\r\n            });\r\n        }\r\n    }\r\n\r\n    public render() {\r\n        if (!this.guardInvalidState()) {\r\n            return (<React.Fragment/>);\r\n        }\r\n\r\n        const questions = this.data.state.questions;\r\n        const search = this.data.state.search;\r\n        const topic = this.data.state.topic;\r\n\r\n        return (\r\n            <div className={\"component--TopicSearchPage\"}>\r\n                <LayoutStandardHeader user={this.props.user.state}\r\n                                      topic={topic.state}\r\n                                      loading={this.data.updating}/>\r\n\r\n                <SearchBar error={this.data.error}\r\n                           value={search}\r\n                           onChange={this.onSearchEvent}/>\r\n\r\n                <QuestionSummaryList questions={questions} showEmpty={true}/>\r\n\r\n                <QuerySetPaginator allowedSizes={[1, 5, 10, 25]}\r\n                                   queryState={questions.state}\r\n                                   onChangeSize={this.onChangeSize}\r\n                                   onNext={this.onNext}\r\n                                   onPrev={this.onPrev}\r\n                                   error={questions.error}/>\r\n\r\n                <LayoutContentContainer>\r\n                    <LayoutRightBox expand={true}>\r\n                        <TopicLink target={TopicLinkType.AddQuestion} topic={this.props.topic}>\r\n                            <button>Ask question</button>\r\n                        </TopicLink>\r\n                    </LayoutRightBox>\r\n                </LayoutContentContainer>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    public guardInvalidState(): boolean {\r\n        return this.data !== null;\r\n    }\r\n\r\n    private onSearchEvent = (value: string) => this.data.search(value);\r\n\r\n    private onChangeSize = (size: number) => this.data.setPageSize(size);\r\n\r\n    private onNext = () => this.data.next();\r\n\r\n    private onPrev = () => this.data.prev();\r\n}\r\n","import {QuerySet} from \"../../../../../react-pangul-core/src/domain/querySet\";\r\nimport {QuestionSummary} from \"../../../../../react-pangul-core/src/domain/questionSummary\";\r\nimport {UserContext} from \"../../../../../react-pangul-core/src/domain/userContext\";\r\nimport {Page} from \"../../../infrastructure/componentHelpers/page\";\r\n\r\nconst DEFAULT_PAGE_SIZE = 5;\r\n\r\nexport interface IUserViewSelfProfileProps {\r\n    user: UserContext;\r\n}\r\n\r\ninterface IUserViewSelfProfile {\r\n    starQuestions: QuerySet<QuestionSummary>;\r\n    pageSize: number;\r\n}\r\n\r\nexport class UserViewSelfProfile extends Page<IUserViewSelfProfileProps, IUserViewSelfProfile> {\r\n    public async next(): Promise<void> {\r\n        await this.update(async () => {\r\n            await this.state.starQuestions.next();\r\n            return null;\r\n        });\r\n    }\r\n\r\n    public async prev(): Promise<void> {\r\n        await this.update(async () => {\r\n            await this.state.starQuestions.prev();\r\n            return null;\r\n        });\r\n    }\r\n\r\n    public async setPageSize(pageSize: number) {\r\n        await this.update(async () => {\r\n            return {pageSize};\r\n        });\r\n        await this.refreshData();\r\n    }\r\n\r\n    protected async loadInitialData(fromProps: IUserViewSelfProfileProps): Promise<void> {\r\n        await this.refreshData();\r\n    }\r\n\r\n    protected blank(): IUserViewSelfProfile {\r\n        return {\r\n            pageSize: DEFAULT_PAGE_SIZE,\r\n            starQuestions: new QuerySet<QuestionSummary>(),\r\n        };\r\n    }\r\n\r\n    protected rebind(): void {\r\n        this.state.starQuestions.parent = this;\r\n    }\r\n\r\n    protected async refreshData(): Promise<void> {\r\n        await this.update(async () => {\r\n            const starQuestions = await QuestionSummary.search(\"* topic:* is:star\", this.state.pageSize);\r\n            return {starQuestions};\r\n        });\r\n    }\r\n}\r\n","import * as React from \"react\";\r\nimport {QuerySetPaginator} from \"../../../components/common/fragments/querySetPaginator/querySetPaginator\";\r\nimport {LayoutContentContainer} from \"../../../components/layout/layoutContentContainer/layoutContentContainer\";\r\nimport {LayoutStandardHeader} from \"../../../components/layout/layoutStandardHeader/layoutStandardHeader\";\r\nimport {QuestionSummaryList} from \"../../../components/question/questionSummaryList/questionSummaryList\";\r\nimport {IUserViewSelfProfileProps, UserViewSelfProfile} from \"./userViewSelfProfile\";\r\n\r\nexport class UserViewSelfProfilePage extends React.Component<IUserViewSelfProfileProps> {\r\n    private data: UserViewSelfProfile;\r\n\r\n    constructor(props: IUserViewSelfProfileProps) {\r\n        super(props);\r\n        this.data = new UserViewSelfProfile(() => this.forceUpdate());\r\n    }\r\n\r\n    public componentDidMount() {\r\n        this.data.unload();\r\n        this.data = new UserViewSelfProfile(() => this.forceUpdate());\r\n        this.data.load(this.props);\r\n    }\r\n\r\n    public componentWillUnmount() {\r\n        this.data.unload();\r\n    }\r\n\r\n    public render() {\r\n        if (!this.guardInvalidState()) {\r\n            return \"\";\r\n        }\r\n\r\n        const starred = this.data.state.starQuestions;\r\n\r\n        return (\r\n            <div className={\"component--TopicHomePage\"}>\r\n                <LayoutStandardHeader user={this.props.user.state}\r\n                                      topic={null}\r\n                                      loading={this.data.updating}/>\r\n\r\n                <div>\r\n                    <LayoutContentContainer>\r\n                        <h3>Marked questions</h3>\r\n                    </LayoutContentContainer>\r\n\r\n                    <QuestionSummaryList questions={starred} showEmpty={true}/>\r\n\r\n                    <QuerySetPaginator allowedSizes={[1, 5, 10, 25]}\r\n                                       queryState={starred.state}\r\n                                       onChangeSize={this.onChangeSize}\r\n                                       onNext={this.onNext}\r\n                                       onPrev={this.onPrev}\r\n                                       error={starred.error}/>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    public guardInvalidState(): boolean {\r\n        return this.data !== null;\r\n    }\r\n\r\n    private onChangeSize = (size: number) => this.data.setPageSize(size);\r\n\r\n    private onNext = () => this.data.next();\r\n\r\n    private onPrev = () => this.data.prev();\r\n}\r\n","import * as React from \"react\";\r\nimport {BrowserRouter, Route, Switch} from \"react-router-dom\";\r\nimport {UserContext} from \"../../../../react-pangul-core/src/domain/userContext\";\r\nimport {TopicAnswerQuestionPage} from \"../../pages/answer/topicAnswerQuestion/topicAnswerQuestionPage\";\r\nimport {TopicEditAnswerPage} from \"../../pages/answer/topicEditAnswer/topicEditAnswerPage\";\r\nimport {GenericHelpPage} from \"../../pages/generic/genericHelpPage/genericHelpPage\";\r\nimport {GenericLogoutPage} from \"../../pages/generic/genericLogoutPage/genericLogoutPage\";\r\nimport {TopicAskQuestionPage} from \"../../pages/question/topicAskQuestion/topicAskQuestionPage\";\r\nimport {TopicEditQuestionPage} from \"../../pages/question/topicEditQuestion/topicEditQuestionPage\";\r\nimport {TopicViewQuestionPage} from \"../../pages/question/topicViewQuestion/topicViewQuestionPage\";\r\nimport {TopicDiscoverPage} from \"../../pages/topic/topicDiscover/topicDiscoverPage\";\r\nimport {TopicEditPage} from \"../../pages/topic/topicEdit/topicEditPage\";\r\nimport {TopicSearchPage} from \"../../pages/topic/topicSearch/topicSearchPage\";\r\nimport {UserViewSelfProfilePage} from \"../../pages/user/userViewProfile/userViewSelfProfilePage\";\r\n\r\nexport interface IAppRoutes {\r\n    user: UserContext;\r\n}\r\n\r\nexport class AppRoutes extends React.Component<IAppRoutes> {\r\n    public render() {\r\n        return (\r\n            <BrowserRouter>\r\n                <Switch>\r\n                    <Route exact={true} path=\"/\" render={this.discoverTopics}/>\r\n                    <Route exact={true} path=\"/help\" render={this.help}/>\r\n                    <Route exact={true} path=\"/self\" render={this.self}/>\r\n                    <Route exact={true} path=\"/logout\" render={this.logout}/>\r\n                    <Route exact={true} path=\"/t/:name\" render={this.searchTopic}/>\r\n                    <Route exact={true} path=\"/t/:name/search/:query\" render={this.searchTopicWithQuery}/>\r\n                    <Route exact={true} path=\"/t/:name/edit\" render={this.editTopic}/>\r\n                    <Route exact={true} path=\"/t/:name/ask\" render={this.askQuestion}/>\r\n                    <Route exact={true} path=\"/t/:name/:questionId\" render={this.viewQuestion}/>\r\n                    <Route exact={true} path=\"/t/:name/:questionId/edit\" render={this.editQuestion}/>\r\n                    <Route exact={true} path=\"/t/:name/:questionId/answer\" render={this.answerQuestion}/>\r\n                    <Route exact={true} path=\"/t/:name/:questionId/answer/:answerId/edit\" render={this.editAnswer}/>\r\n                </Switch>\r\n            </BrowserRouter>\r\n        );\r\n    }\r\n\r\n    private help = () => (\r\n        <GenericHelpPage/>\r\n    )\r\n\r\n    private logout = () => (\r\n        <GenericLogoutPage user={this.props.user}/>\r\n    )\r\n\r\n    private self = () => (\r\n        <UserViewSelfProfilePage user={this.props.user}/>\r\n    )\r\n\r\n\r\n    private discoverTopics = () => (\r\n        <TopicDiscoverPage user={this.props.user} search=\"*\"/>\r\n    )\r\n\r\n    private searchTopicWithQuery = (props: any) => {\r\n        return (\r\n            <TopicSearchPage user={this.props.user} topic={props.match.params.name} search={props.match.params.query}/>\r\n        );\r\n    }\r\n\r\n    private searchTopic = (props: any) => (\r\n        <TopicSearchPage user={this.props.user} topic={props.match.params.name} search=\"*\"/>\r\n    )\r\n\r\n    private editTopic = (props: any) => (\r\n        <TopicEditPage user={this.props.user} topic={props.match.params.name}/>\r\n    )\r\n\r\n    private askQuestion = (props: any) => (\r\n        <TopicAskQuestionPage user={this.props.user}\r\n                              topic={props.match.params.name}/>\r\n    )\r\n\r\n    private viewQuestion = (props: any) => (\r\n        <TopicViewQuestionPage user={this.props.user}\r\n                               topic={props.match.params.name}\r\n                               question={props.match.params.questionId}/>\r\n    )\r\n\r\n    private editQuestion = (props: any) => (\r\n        <TopicEditQuestionPage user={this.props.user}\r\n                               topic={props.match.params.name}\r\n                               question={props.match.params.questionId}/>\r\n    )\r\n\r\n    private editAnswer = (props: any) => (\r\n        <TopicEditAnswerPage user={this.props.user}\r\n                             topic={props.match.params.name}\r\n                             question={props.match.params.questionId}\r\n                             answer={props.match.params.answerId}/>\r\n    )\r\n\r\n    private answerQuestion = (props: any) => (\r\n        <TopicAnswerQuestionPage user={this.props.user}\r\n                                 topic={props.match.params.name}\r\n                                 question={props.match.params.questionId}/>\r\n    )\r\n}\r\n","import * as React from \"react\";\r\nimport {BrowserRouter, Switch} from \"react-router-dom\";\r\nimport {UserContext} from \"../../../../react-pangul-core/src/domain/userContext\";\r\nimport {LayoutTheme} from \"../../components/layout/layoutTheme/layoutTheme\";\r\nimport {configureApplication, ISettings} from \"../../infrastructure/service/settingsProvider\";\r\nimport {GenericLoginPage} from \"../../pages/generic/genericLoginPage/genericLoginPage\";\r\nimport {AppAuth} from \"../appAuth/appAuth\";\r\nimport {AppRoutes} from \"../appRoutes/appRoutes\";\r\n\r\nexport interface IPangul {\r\n    settings: ISettings;\r\n}\r\n\r\nexport interface IPangulState {\r\n    user: UserContext;\r\n}\r\n\r\nexport class Pangul extends React.Component<IPangul, IPangulState> {\r\n    constructor(props: IPangul) {\r\n        super(props);\r\n        this.state = {\r\n            user: new UserContext(),\r\n        };\r\n    }\r\n\r\n    public componentDidMount() {\r\n        configureApplication(this.props.settings);\r\n    }\r\n\r\n    public render() {\r\n        return (\r\n            <LayoutTheme>\r\n                <AppAuth user={this.state.user}\r\n                         renderLoggedIn={this.showContent}\r\n                         renderLoggedOut={this.showLoginForm}/>\r\n            </LayoutTheme>\r\n        );\r\n    }\r\n\r\n    private showLoginForm = () => (<GenericLoginPage user={this.state.user}/>);\r\n\r\n    private showContent = () => {\r\n        return !this.props.settings.test.test\r\n            ? this.showMainContent()\r\n            : this.showTestContent();\r\n    }\r\n\r\n    private showMainContent = () => (<AppRoutes user={this.state.user}/>)\r\n\r\n    private showTestContent = () => {\r\n        if (this.props.settings.test.testContent == null) {\r\n            return <React.Fragment/>;\r\n        }\r\n        return (\r\n            <BrowserRouter>\r\n                <Switch>\r\n                    {this.props.settings.test.testContent(this.state.user)}\r\n                </Switch>\r\n            </BrowserRouter>\r\n        );\r\n    }\r\n}\r\n","import * as React from 'react';\r\nimport {Pangul} from \"./packages/react-pangul-app/src/app/pangul/pangul\";\r\nimport {ISettings} from \"./packages/react-pangul-app/src/infrastructure/service/settingsProvider\";\r\nimport {UserViewSelfProfilePage} from \"./packages/react-pangul-app/src/pages/user/userViewProfile/userViewSelfProfilePage\";\r\nimport {UserContext} from \"./packages/react-pangul-core/src/domain/userContext\";\r\n\r\nexport interface AppProps {\r\n    settings: ISettings;\r\n}\r\n\r\nconst appTestContent = (user: UserContext) => (\r\n    <React.Fragment>\r\n        <UserViewSelfProfilePage user={user}/>\r\n    </React.Fragment>\r\n);\r\n\r\nexport const App = (props: AppProps) => {\r\n    const settings = {...props.settings, testContent: appTestContent};\r\n    return (\r\n        <Pangul settings={settings}/>\r\n    );\r\n};\r\n\r\n\r\n","// tslint:disable:no-console\r\n// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the 'N+1' visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL!,\r\n      window.location.toString()\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker) {\r\n          installingWorker.onstatechange = () => {\r\n            if (installingWorker.state === 'installed') {\r\n              if (navigator.serviceWorker.controller) {\r\n                // At this point, the old content will have been purged and\r\n                // the fresh content will have been added to the cache.\r\n                // It's the perfect time to display a 'New content is\r\n                // available; please refresh.' message in your web app.\r\n                console.log('New content is available; please refresh.');\r\n              } else {\r\n                // At this point, everything has been precached.\r\n                // It's the perfect time to display a\r\n                // 'Content is cached for offline use.' message.\r\n                console.log('Content is cached for offline use.');\r\n              }\r\n            }\r\n          };\r\n        }\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type')!.indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import * as React from 'react';\r\nimport * as ReactDOM from 'react-dom';\r\nimport {App} from './App';\r\nimport {ISettings} from \"./packages/react-pangul-app/src/infrastructure/service/settingsProvider\";\r\nimport AjaxFetch from './packages/react-pangul-core/src/infrastructure/fetch/ajaxFetch';\r\nimport registerServiceWorker from './registerServiceWorker';\r\n\r\nnew AjaxFetch(\"/\").get<ISettings>(\"config.json\").then((settings: ISettings) => {\r\n    ReactDOM.render(\r\n        <App settings={settings}/>,\r\n        document.getElementById('root') as HTMLElement\r\n    );\r\n    registerServiceWorker();\r\n});\r\n\r\n"],"sourceRoot":""}